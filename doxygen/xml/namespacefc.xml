<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacefc" kind="namespace" language="C++">
    <compoundname>fc</compoundname>
    <innerclass refid="structfc_1_1get__typename_3_01graphene_1_1db_1_1object__id_3_01_space_i_d_00_01_type_i_d_01_4_01_4" prot="public">fc::get_typename&lt; graphene::db::object_id&lt; SpaceID, TypeID &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01graphene_1_1protocol_1_1extension_3_01_t_01_4_01_4" prot="public">fc::get_typename&lt; graphene::protocol::extension&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01std_1_1shared__ptr_3_01const_01graphene_1_1protocol_1_1fee__schedule_01_4_01_4" prot="public">fc::get_typename&lt; std::shared_ptr&lt; const graphene::protocol::fee_schedule &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01std_1_1shared__ptr_3_01graphene_1_1protocol_1_1fee__schedule_01_4_01_4" prot="public">fc::get_typename&lt; std::shared_ptr&lt; graphene::protocol::fee_schedule &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1graphene__extension__from__variant__visitor" prot="public">fc::graphene_extension_from_variant_visitor</innerclass>
    <innerclass refid="structfc_1_1graphene__extension__to__variant__visitor" prot="public">fc::graphene_extension_to_variant_visitor</innerclass>
    <innerclass refid="structfc_1_1reflector_3_01graphene_1_1db_1_1object__id_3_01_space_i_d_00_01_type_i_d_01_4_01_4" prot="public">fc::reflector&lt; graphene::db::object_id&lt; SpaceID, TypeID &gt; &gt;</innerclass>
    <innernamespace refid="namespacefc_1_1ecc">fc::ecc</innernamespace>
    <innernamespace refid="namespacefc_1_1raw">fc::raw</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacefc_1a5c3f07e0187947e20a5ce2f97f9815f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const account_multi_index_type &amp;accts, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1chain_1a2cb69664c48f3d41eb5ac8b6bc4847cc" kindref="member">account_multi_index_type</ref> &amp;</type>
          <declname>accts</declname>
        </param>
        <param>
          <type>variant &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="39" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="5095" bodyend="5098"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad381cfba18e8742b3ccab06107f55d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, account_multi_index_type &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const variant &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1chain_1a2cb69664c48f3d41eb5ac8b6bc4847cc" kindref="member">account_multi_index_type</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="40" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="5100" bodyend="5104"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad11bf17bb1033f28ca5c558c1adf9dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::protocol::address &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">graphene::protocol::address</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>variant &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/address.cpp" line="103" column="1" bodyfile="libraries/protocol/address.cpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aeceb4cd05c4f09395d67cfda0808dbbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, graphene::protocol::address &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const variant &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">graphene::protocol::address</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/address.cpp" line="107" column="1" bodyfile="libraries/protocol/address.cpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a05038042784b108c1e3f85220171331e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::protocol::address &amp;var, fc::variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">graphene::protocol::address</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>fc::variant &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a24fe10b88e5d559c112227aef64d0eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, graphene::protocol::address &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const fc::variant &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">graphene::protocol::address</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a17b1a246660b5e23ed72d3e7ceef5701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, graphene::protocol::extension&lt; T &gt; &amp;value, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const fc::variant &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1extension" kindref="compound">graphene::protocol::extension</ref>&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/ext.hpp" line="166" column="1" bodyfile="libraries/protocol/include/graphene/protocol/ext.hpp" bodystart="166" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a9fc6d56d26b6f04c9b9ed80784e1fa43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::protocol::extension&lt; T &gt; &amp;value, fc::variant &amp;var, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1extension" kindref="compound">graphene::protocol::extension</ref>&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>fc::variant &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/ext.hpp" line="199" column="1" bodyfile="libraries/protocol/include/graphene/protocol/ext.hpp" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5b6019f9cfab7d54d9700103d953841d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::db::object_id_type &amp;var, fc::variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">graphene::db::object_id_type</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>fc::variant &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="186" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5e53b4a48caca4d808323ce8ef0fa106" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, graphene::db::object_id_type &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const fc::variant &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">graphene::db::object_id_type</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="191" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="191" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a49dd4766f5ea1d4f5e30c9353f5ea813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>SpaceID</declname>
            <defname>SpaceID</defname>
          </param>
          <param>
            <type>uint8_t</type>
            <declname>TypeID</declname>
            <defname>TypeID</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::db::object_id&lt; SpaceID, TypeID &gt; &amp;var, fc::variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">graphene::db::object_id</ref>&lt; SpaceID, TypeID &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>fc::variant &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="208" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1179cd3b9e7f1abe536d66aebfd124c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>SpaceID</declname>
            <defname>SpaceID</defname>
          </param>
          <param>
            <type>uint8_t</type>
            <declname>TypeID</declname>
            <defname>TypeID</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, graphene::db::object_id&lt; SpaceID, TypeID &gt; &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const fc::variant &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">graphene::db::object_id</ref>&lt; SpaceID, TypeID &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="213" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="213" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a23903bea53c6f62acbbb28cb43b11333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::protocol::pts_address &amp;var, fc::variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">graphene::protocol::pts_address</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>fc::variant &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/pts_address.hpp" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a0bbfe89b8857f333f3689d81f3f15b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, graphene::protocol::pts_address &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const fc::variant &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">graphene::protocol::pts_address</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/pts_address.hpp" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a099c854b2ae216f51d33dd2aca7e6712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::protocol::public_key_type &amp;var, fc::variant &amp;vo, uint32_t max_depth=2)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">graphene::protocol::public_key_type</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>fc::variant &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="223" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa6059746b6bd2ea431fd22c9294e7cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, graphene::protocol::public_key_type &amp;vo, uint32_t max_depth=2)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const fc::variant &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">graphene::protocol::public_key_type</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="224" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5b658e1a375d1c5ebc142b9a03dff7fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, std::shared_ptr&lt; const graphene::protocol::fee_schedule &gt; &amp;vo, uint32_t max_depth=2)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const fc::variant &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="structgraphene_1_1protocol_1_1fee__schedule" kindref="compound">graphene::protocol::fee_schedule</ref> &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="235" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad8e730046e02542f010c48ebe8aa240a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::protocol::vote_id_type &amp;var, fc::variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1vote__id__type" kindref="compound">graphene::protocol::vote_id_type</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>fc::variant &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/vote.hpp" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ace0cffd850de6ab0f8d6448a66dddb2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, graphene::protocol::vote_id_type &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const fc::variant &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1vote__id__type" kindref="compound">graphene::protocol::vote_id_type</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/vote.hpp" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a40d6a570e9437f4c6f8b940b2ca4ae1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::protocol::pts_address &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">graphene::protocol::pts_address</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>variant &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/pts_address.cpp" line="89" column="1" bodyfile="libraries/protocol/pts_address.cpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1acf1f8dc5434409a27d5ed5b30bdf1af7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, graphene::protocol::pts_address &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const variant &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">graphene::protocol::pts_address</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/pts_address.cpp" line="93" column="1" bodyfile="libraries/protocol/pts_address.cpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aafabb09201b13b54166adc7828302489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::protocol::vote_id_type &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1vote__id__type" kindref="compound">graphene::protocol::vote_id_type</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>variant &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/vote.cpp" line="30" column="1" bodyfile="libraries/protocol/vote.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a84a93fd39d4c87ffe96742c21a34cd21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, graphene::protocol::vote_id_type &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const variant &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1vote__id__type" kindref="compound">graphene::protocol::vote_id_type</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/vote.cpp" line="35" column="1" bodyfile="libraries/protocol/vote.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="38" column="1"/>
  </compounddef>
</doxygen>
