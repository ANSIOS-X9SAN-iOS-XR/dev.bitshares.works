<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgraphene_1_1app_1_1crypto__api" kind="class" language="C++" prot="public">
    <compoundname>graphene::app::crypto_api</compoundname>
    <includes refid="api_8hpp" local="no">api.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1adcb829f4fc90959164d92b4b285e8085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::app::crypto_api::crypto_api</definition>
        <argsstring>()</argsstring>
        <name>crypto_api</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="310" column="1" bodyfile="libraries/app/api.cpp" bodystart="471" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1a819517c27c9b5436cea4bd7114d68759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>fc::ecc::commitment_type</type>
        <definition>commitment_type graphene::app::crypto_api::blind</definition>
        <argsstring>(const fc::ecc::blind_factor_type &amp;blind, uint64_t value)</argsstring>
        <name>blind</name>
        <param>
          <type>const fc::ecc::blind_factor_type &amp;</type>
          <declname>blind</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="312" column="1" bodyfile="libraries/app/api.cpp" bodystart="473" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1aa1a6caa5122568ca0ae4f5379a2d1943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>fc::ecc::blind_factor_type</type>
        <definition>blind_factor_type graphene::app::crypto_api::blind_sum</definition>
        <argsstring>(const std::vector&lt; blind_factor_type &gt; &amp;blinds_in, uint32_t non_neg)</argsstring>
        <name>blind_sum</name>
        <param>
          <type>const std::vector&lt; blind_factor_type &gt; &amp;</type>
          <declname>blinds_in</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>non_neg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="314" column="1" bodyfile="libraries/app/api.cpp" bodystart="478" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1ad9c6f9589828b10f4cc8bfe4a6a359d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::app::crypto_api::verify_sum</definition>
        <argsstring>(const std::vector&lt; commitment_type &gt; &amp;commits_in, const std::vector&lt; commitment_type &gt; &amp;neg_commits_in, int64_t excess)</argsstring>
        <name>verify_sum</name>
        <param>
          <type>const std::vector&lt; commitment_type &gt; &amp;</type>
          <declname>commits_in</declname>
        </param>
        <param>
          <type>const std::vector&lt; commitment_type &gt; &amp;</type>
          <declname>neg_commits_in</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>excess</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="316" column="1" bodyfile="libraries/app/api.cpp" bodystart="483" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1a5310e5955a16937db91c99a8fea0ffe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1verify__range__result" kindref="compound">verify_range_result</ref></type>
        <definition>verify_range_result graphene::app::crypto_api::verify_range</definition>
        <argsstring>(const fc::ecc::commitment_type &amp;commit, const std::vector&lt; char &gt; &amp;proof)</argsstring>
        <name>verify_range</name>
        <param>
          <type>const fc::ecc::commitment_type &amp;</type>
          <declname>commit</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>proof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="318" column="1" bodyfile="libraries/app/api.cpp" bodystart="488" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1a1923d73235200a4f3da0a4d021a865d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt; char &gt; graphene::app::crypto_api::range_proof_sign</definition>
        <argsstring>(uint64_t min_value, const commitment_type &amp;commit, const blind_factor_type &amp;commit_blind, const blind_factor_type &amp;nonce, int8_t base10_exp, uint8_t min_bits, uint64_t actual_value)</argsstring>
        <name>range_proof_sign</name>
        <param>
          <type>uint64_t</type>
          <declname>min_value</declname>
        </param>
        <param>
          <type>const commitment_type &amp;</type>
          <declname>commit</declname>
        </param>
        <param>
          <type>const blind_factor_type &amp;</type>
          <declname>commit_blind</declname>
        </param>
        <param>
          <type>const blind_factor_type &amp;</type>
          <declname>nonce</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>base10_exp</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>min_bits</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>actual_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="320" column="1" bodyfile="libraries/app/api.cpp" bodystart="495" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1af49d58d9538c6908ea320887af07d9f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1verify__range__proof__rewind__result" kindref="compound">verify_range_proof_rewind_result</ref></type>
        <definition>verify_range_proof_rewind_result graphene::app::crypto_api::verify_range_proof_rewind</definition>
        <argsstring>(const blind_factor_type &amp;nonce, const fc::ecc::commitment_type &amp;commit, const std::vector&lt; char &gt; &amp;proof)</argsstring>
        <name>verify_range_proof_rewind</name>
        <param>
          <type>const blind_factor_type &amp;</type>
          <declname>nonce</declname>
        </param>
        <param>
          <type>const fc::ecc::commitment_type &amp;</type>
          <declname>commit</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>proof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="329" column="1" bodyfile="libraries/app/api.cpp" bodystart="506" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1app_1_1crypto__api_1a6765af523fc6dd5e75872782b4ee12b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>range_proof_info</type>
        <definition>range_proof_info graphene::app::crypto_api::range_get_info</definition>
        <argsstring>(const std::vector&lt; char &gt; &amp;proof)</argsstring>
        <name>range_get_info</name>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>proof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/app/include/graphene/app/api.hpp" line="334" column="1" bodyfile="libraries/app/api.cpp" bodystart="522" bodyend="525"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/app/include/graphene/app/api.hpp" line="308" column="1" bodyfile="libraries/app/include/graphene/app/api.hpp" bodystart="307" bodyend="335"/>
    <listofallmembers>
      <member refid="classgraphene_1_1app_1_1crypto__api_1a819517c27c9b5436cea4bd7114d68759" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>blind</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1aa1a6caa5122568ca0ae4f5379a2d1943" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>blind_sum</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1adcb829f4fc90959164d92b4b285e8085" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>crypto_api</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1a6765af523fc6dd5e75872782b4ee12b2" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>range_get_info</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1a1923d73235200a4f3da0a4d021a865d2" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>range_proof_sign</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1a5310e5955a16937db91c99a8fea0ffe6" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>verify_range</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1af49d58d9538c6908ea320887af07d9f3" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>verify_range_proof_rewind</name></member>
      <member refid="classgraphene_1_1app_1_1crypto__api_1ad9c6f9589828b10f4cc8bfe4a6a359d3" prot="public" virt="non-virtual"><scope>graphene::app::crypto_api</scope><name>verify_sum</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
