<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacefc_1_1detail" kind="namespace" language="C++">
    <compoundname>fc::detail</compoundname>
    <innerclass refid="structfc_1_1detail_1_1add" prot="public">fc::detail::add</innerclass>
    <innerclass refid="structfc_1_1detail_1_1add__eq" prot="public">fc::detail::add_eq</innerclass>
    <innerclass refid="structfc_1_1detail_1_1all__optionals" prot="public">fc::detail::all_optionals</innerclass>
    <innerclass refid="structfc_1_1detail_1_1all__optionals_3_01fc_1_1optional_3_01_t_01_4_00_01_ts_8_8_8_01_4" prot="public">fc::detail::all_optionals&lt; fc::optional&lt; T &gt;, Ts... &gt;</innerclass>
    <innerclass refid="structfc_1_1detail_1_1all__optionals_3_01_t_00_01_ts_8_8_8_01_4" prot="public">fc::detail::all_optionals&lt; T, Ts... &gt;</innerclass>
    <innerclass refid="structfc_1_1detail_1_1all__optionals_3_4" prot="public">fc::detail::all_optionals&lt;&gt;</innerclass>
    <innerclass refid="classfc_1_1detail_1_1any__api" prot="public">fc::detail::any_api</innerclass>
    <innerclass refid="classfc_1_1detail_1_1appender__factory__impl" prot="public">fc::detail::appender_factory_impl</innerclass>
    <innerclass refid="classfc_1_1detail_1_1average__rate__meter" prot="public">fc::detail::average_rate_meter</innerclass>
    <innerclass refid="classfc_1_1detail_1_1buffered__istream__impl" prot="public">fc::detail::buffered_istream_impl</innerclass>
    <innerclass refid="classfc_1_1detail_1_1buffered__ostream__impl" prot="public">fc::detail::buffered_ostream_impl</innerclass>
    <innerclass refid="classfc_1_1detail_1_1callback__functor" prot="public">fc::detail::callback_functor</innerclass>
    <innerclass refid="classfc_1_1detail_1_1callback__functor_3_01void_07_args_8_8_8_08_4" prot="public">fc::detail::callback_functor&lt; void(Args...)&gt;</innerclass>
    <innerclass refid="classfc_1_1detail_1_1completion__handler" prot="public">fc::detail::completion_handler</innerclass>
    <innerclass refid="classfc_1_1detail_1_1completion__handler__impl" prot="public">fc::detail::completion_handler_impl</innerclass>
    <innerclass refid="classfc_1_1detail_1_1completion__handler__impl_3_01_functor_00_01void_01_4" prot="public">fc::detail::completion_handler_impl&lt; Functor, void &gt;</innerclass>
    <innerclass refid="structfc_1_1detail_1_1extract__op" prot="public">fc::detail::extract_op</innerclass>
    <innerclass refid="structfc_1_1detail_1_1functor__destructor" prot="public">fc::detail::functor_destructor</innerclass>
    <innerclass refid="structfc_1_1detail_1_1functor__run" prot="public">fc::detail::functor_run</innerclass>
    <innerclass refid="classfc_1_1detail_1_1idle__guard" prot="public">fc::detail::idle_guard</innerclass>
    <innerclass refid="classfc_1_1detail_1_1idle__notifier__impl" prot="public">fc::detail::idle_notifier_impl</innerclass>
    <innerclass refid="structfc_1_1detail_1_1insert__op" prot="public">fc::detail::insert_op</innerclass>
    <innerclass refid="structfc_1_1detail_1_1is__operation__shorter" prot="public">fc::detail::is_operation_shorter</innerclass>
    <innerclass refid="structfc_1_1detail_1_1is__optional" prot="public">fc::detail::is_optional</innerclass>
    <innerclass refid="structfc_1_1detail_1_1is__optional_3_01fc_1_1optional_3_01_t_01_4_01_4" prot="public">fc::detail::is_optional&lt; fc::optional&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classfc_1_1detail_1_1log__context__impl" prot="public">fc::detail::log_context_impl</innerclass>
    <innerclass refid="classfc_1_1detail_1_1log__message__impl" prot="public">fc::detail::log_message_impl</innerclass>
    <innerclass refid="structfc_1_1detail_1_1optionals__callable" prot="public">fc::detail::optionals_callable</innerclass>
    <innerclass refid="classfc_1_1detail_1_1path__wrapper" prot="public">fc::detail::path_wrapper</innerclass>
    <innerclass refid="classfc_1_1detail_1_1pool__impl" prot="public">fc::detail::pool_impl</innerclass>
    <innerclass refid="classfc_1_1detail_1_1rate__limited__operation" prot="public">fc::detail::rate_limited_operation</innerclass>
    <innerclass refid="classfc_1_1detail_1_1rate__limited__tcp__read__operation" prot="public">fc::detail::rate_limited_tcp_read_operation</innerclass>
    <innerclass refid="classfc_1_1detail_1_1rate__limited__tcp__write__operation" prot="public">fc::detail::rate_limited_tcp_write_operation</innerclass>
    <innerclass refid="classfc_1_1detail_1_1rate__limiting__group__impl" prot="public">fc::detail::rate_limiting_group_impl</innerclass>
    <innerclass refid="structfc_1_1detail_1_1specific__data__info" prot="public">fc::detail::specific_data_info</innerclass>
    <innerclass refid="structfc_1_1detail_1_1sub" prot="public">fc::detail::sub</innerclass>
    <innerclass refid="structfc_1_1detail_1_1sub__eq" prot="public">fc::detail::sub_eq</innerclass>
    <innerclass refid="classfc_1_1detail_1_1url__impl" prot="public">fc::detail::url_impl</innerclass>
    <innerclass refid="structfc_1_1detail_1_1void__functor__run" prot="public">fc::detail::void_functor_run</innerclass>
    <innerclass refid="classfc_1_1detail_1_1worker__pool" prot="public">fc::detail::worker_pool</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacefc_1_1detail_1aba6c2652551f67c828453623be5336b5" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t fc::detail::minimum_read_size</definition>
        <argsstring></argsstring>
        <name>minimum_read_size</name>
        <initializer>= 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/buffered_iostream.cpp" line="29" column="1" bodyfile="libraries/fc/src/io/buffered_iostream.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1_1detail_1a31e94548ba313b3c37670d1978247b28" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fc::detail::have_so_reuseport</definition>
        <argsstring></argsstring>
        <name>have_so_reuseport</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/network/tcp_socket.cpp" line="18" column="1" bodyfile="libraries/fc/src/network/tcp_socket.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1_1detail_1afc402b5331c5d04cc9cc5e93a684012a" prot="public" static="no" mutable="no">
        <type>boost::atomic&lt; unsigned &gt;</type>
        <definition>boost::atomic&lt;unsigned&gt; fc::detail::thread_specific_slot_counter</definition>
        <argsstring></argsstring>
        <name>thread_specific_slot_counter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/thread/thread_specific.cpp" line="10" column="1" bodyfile="libraries/fc/src/thread/thread_specific.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacefc_1_1detail_1a9bfc76faf8bba310d9b587ce07f5fb40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::detail::throw_datastream_range_error</definition>
        <argsstring>(const char *file, size_t len, int64_t over)</argsstring>
        <name>throw_datastream_range_error</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>over</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/datastream.hpp" line="9" column="1" bodyfile="libraries/fc/src/io/datastream.cpp" bodystart="4" bodyend="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1a37838d46cf09ae8ce633a696490ad524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename Arg0</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::function&lt; R(Args...)&gt;</type>
        <definition>std::function&lt;R(Args...)&gt; fc::detail::bind_first_arg</definition>
        <argsstring>(const std::function&lt; R(Arg0, Args...)&gt; &amp;f, Arg0 a0)</argsstring>
        <name>bind_first_arg</name>
        <param>
          <type>const std::function&lt; R(Arg0, Args...)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Arg0</type>
          <declname>a0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/rpc/api_connection.hpp" line="34" column="1" bodyfile="libraries/fc/include/fc/rpc/api_connection.hpp" bodystart="34" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1a27b1cd54624fe7d69111488554dd8cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type>R</type>
        <definition>R fc::detail::call_generic</definition>
        <argsstring>(const std::function&lt; R()&gt; &amp;f, variants::const_iterator a0, variants::const_iterator e, uint32_t max_depth=1)</argsstring>
        <name>call_generic</name>
        <param>
          <type>const std::function&lt; R()&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>variants::const_iterator</type>
          <declname>a0</declname>
        </param>
        <param>
          <type>variants::const_iterator</type>
          <declname>e</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/rpc/api_connection.hpp" line="41" column="1" bodyfile="libraries/fc/include/fc/rpc/api_connection.hpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1a0a0aebaca47917c94ebb3fe704b88b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename Arg0</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>R</type>
        <definition>R fc::detail::call_generic</definition>
        <argsstring>(const std::function&lt; R(Arg0, Args...)&gt; &amp;f, variants::const_iterator a0, variants::const_iterator e, uint32_t max_depth)</argsstring>
        <name>call_generic</name>
        <param>
          <type>const std::function&lt; R(Arg0, Args...)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>variants::const_iterator</type>
          <declname>a0</declname>
        </param>
        <param>
          <type>variants::const_iterator</type>
          <declname>e</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/rpc/api_connection.hpp" line="47" column="1" bodyfile="libraries/fc/include/fc/rpc/api_connection.hpp" bodystart="47" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1a90751174c3cb257aa7f4d0a201f032d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::function&lt; <ref refid="classfc_1_1variant" kindref="compound">variant</ref>(const <ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">fc::variants</ref> &amp;, uint32_t)&gt;</type>
        <definition>std::function&lt;variant(const fc::variants&amp;, uint32_t)&gt; fc::detail::to_generic</definition>
        <argsstring>(const std::function&lt; R(Args...)&gt; &amp;f)</argsstring>
        <name>to_generic</name>
        <param>
          <type>const std::function&lt; R(Args...)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/rpc/api_connection.hpp" line="62" column="1" bodyfile="libraries/fc/include/fc/rpc/api_connection.hpp" bodystart="62" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1a5416b7bdd1371745bde5ad6cafa03fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::function&lt; <ref refid="classfc_1_1variant" kindref="compound">variant</ref>(const <ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">fc::variants</ref> &amp;, uint32_t)&gt;</type>
        <definition>std::function&lt;variant(const fc::variants&amp;, uint32_t)&gt; fc::detail::to_generic</definition>
        <argsstring>(const std::function&lt; void(Args...)&gt; &amp;f)</argsstring>
        <name>to_generic</name>
        <param>
          <type>const std::function&lt; void(Args...)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/rpc/api_connection.hpp" line="71" column="1" bodyfile="libraries/fc/include/fc/rpc/api_connection.hpp" bodystart="71" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1a5da55ec22350644448bf1d341fc8cd42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1detail_1_1worker__pool" kindref="compound">worker_pool</ref> &amp;</type>
        <definition>worker_pool &amp; fc::detail::get_worker_pool</definition>
        <argsstring>()</argsstring>
        <name>get_worker_pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/parallel.hpp" line="47" column="1" bodyfile="libraries/fc/src/thread/parallel.cpp" bodystart="152" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1aee0c6d2f6d400b170032570f80052ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * fc::detail::get_task_specific_data</definition>
        <argsstring>(unsigned slot)</argsstring>
        <name>get_task_specific_data</name>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/task.hpp" line="26" column="1" bodyfile="libraries/fc/src/thread/thread_specific.cpp" bodystart="41" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1a34696d4b92d9708a89ad9a2a2cdf954a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::detail::set_task_specific_data</definition>
        <argsstring>(unsigned slot, void *new_value, void(*cleanup)(void *))</argsstring>
        <name>set_task_specific_data</name>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/task.hpp" line="27" column="1" bodyfile="libraries/fc/src/thread/thread_specific.cpp" bodystart="51" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1a495223a785cce68c490b01c4ce597302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * fc::detail::get_thread_specific_data</definition>
        <argsstring>(unsigned slot)</argsstring>
        <name>get_thread_specific_data</name>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="14" column="1" bodyfile="libraries/fc/src/thread/thread_specific.cpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1a772ff143b813d9b3733b4e81b9ff7d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::detail::set_thread_specific_data</definition>
        <argsstring>(unsigned slot, void *new_value, void(*cleanup)(void *))</argsstring>
        <name>set_thread_specific_data</name>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="15" column="1" bodyfile="libraries/fc/src/thread/thread_specific.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1aee838919a9737c4a5c98ec3b8a6739fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned fc::detail::get_next_unused_task_storage_slot</definition>
        <argsstring>()</argsstring>
        <name>get_next_unused_task_storage_slot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="16" column="1" bodyfile="libraries/fc/src/thread/thread_specific.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1ad7aa8389f6687d8951ea2912ab7cc5e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned fc::detail::get_next_unused_thread_storage_slot</definition>
        <argsstring>()</argsstring>
        <name>get_next_unused_thread_storage_slot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread_specific.hpp" line="8" column="1" bodyfile="libraries/fc/src/thread/thread_specific.cpp" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1a03a3eb0a26dc27acc7b6a5a2d31bd381" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fc::detail::shift_l</definition>
        <argsstring>(const uint8_t *in, uint8_t *out, std::size_t n, unsigned int i)</argsstring>
        <name>shift_l</name>
        <param>
          <type>const uint8_t *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/_digest_common.cpp" line="5" column="1" bodyfile="libraries/fc/src/crypto/_digest_common.cpp" bodystart="5" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1a525304bb69dc7d4720016c3b35dd0bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::detail::shift_l</definition>
        <argsstring>(const char *in, char *out, std::size_t n, unsigned int i)</argsstring>
        <name>shift_l</name>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/_digest_common.cpp" line="14" column="1" bodyfile="libraries/fc/src/crypto/_digest_common.cpp" bodystart="14" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1af67a11727da594837fecf62f5cd49ec5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fc::detail::shift_r</definition>
        <argsstring>(const uint8_t *in, uint8_t *out, std::size_t n, unsigned int i)</argsstring>
        <name>shift_r</name>
        <param>
          <type>const uint8_t *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/_digest_common.cpp" line="29" column="1" bodyfile="libraries/fc/src/crypto/_digest_common.cpp" bodystart="29" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1ac828e661db18723fcfcea3206bd365a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::detail::shift_r</definition>
        <argsstring>(const char *in, char *out, std::size_t n, unsigned int i)</argsstring>
        <name>shift_r</name>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/_digest_common.cpp" line="38" column="1" bodyfile="libraries/fc/src/crypto/_digest_common.cpp" bodystart="38" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1a34343f5ea2cf2fe195cf37578f0f5972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* fc::detail::get_specific_data</definition>
        <argsstring>(std::vector&lt; detail::specific_data_info &gt; *specific_data, unsigned slot)</argsstring>
        <name>get_specific_data</name>
        <param>
          <type>std::vector&lt; <ref refid="structfc_1_1detail_1_1specific__data__info" kindref="compound">detail::specific_data_info</ref> &gt; *</type>
          <declname>specific_data</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/thread/thread_specific.cpp" line="16" column="1" bodyfile="libraries/fc/src/thread/thread_specific.cpp" bodystart="16" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1_1detail_1ae1416ef56d470b295fb3e1c82e368c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::detail::set_specific_data</definition>
        <argsstring>(std::vector&lt; detail::specific_data_info &gt; *specific_data, unsigned slot, void *new_value, void(*cleanup)(void *))</argsstring>
        <name>set_specific_data</name>
        <param>
          <type>std::vector&lt; <ref refid="structfc_1_1detail_1_1specific__data__info" kindref="compound">detail::specific_data_info</ref> &gt; *</type>
          <declname>specific_data</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>cleanup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/thread/thread_specific.cpp" line="21" column="1" bodyfile="libraries/fc/src/thread/thread_specific.cpp" bodystart="21" bodyend="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/include/fc/api.hpp" line="16" column="1"/>
  </compounddef>
</doxygen>
