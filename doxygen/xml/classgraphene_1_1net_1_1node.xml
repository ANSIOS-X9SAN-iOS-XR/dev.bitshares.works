<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgraphene_1_1net_1_1node" kind="class" language="C++" prot="public">
    <compoundname>graphene::net::node</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; node &gt;</basecompoundref>
    <derivedcompoundref refid="classgraphene_1_1net_1_1simulated__network" prot="public" virt="non-virtual">graphene::net::simulated_network</derivedcompoundref>
    <includes refid="node_8hpp" local="no">node.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgraphene_1_1net_1_1node_1a17244354e74a5790ba51c12ff0a9f820" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classgraphene_1_1net_1_1detail_1_1node__impl" kindref="compound">detail::node_impl</ref>, <ref refid="structgraphene_1_1net_1_1detail_1_1node__impl__deleter" kindref="compound">detail::node_impl_deleter</ref> &gt;</type>
        <definition>std::unique_ptr&lt;detail::node_impl, detail::node_impl_deleter&gt; graphene::net::node::my</definition>
        <argsstring></argsstring>
        <name>my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="296" column="1" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="296" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a2c669ad34653238449e0dc0f33319281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::net::node::node</definition>
        <argsstring>(const std::string &amp;user_agent)</argsstring>
        <name>node</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>user_agent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="195" column="1" bodyfile="libraries/net/node.cpp" bodystart="4703" bodyend="4706"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a4123cfc1660d19fe6c48a468d8daced0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>graphene::net::node::~node</definition>
        <argsstring>()</argsstring>
        <name>~node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="196" column="1" bodyfile="libraries/net/node.cpp" bodystart="4708" bodyend="4710"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1ac4c9d53582644a76d462f2b9dfbcc778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="198" column="1" bodyfile="libraries/net/node.cpp" bodystart="4854" bodyend="4857"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a071fd9b43eb2b4adccca649edba6b311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::set_node_delegate</definition>
        <argsstring>(node_delegate *del)</argsstring>
        <name>set_node_delegate</name>
        <param>
          <type><ref refid="classgraphene_1_1net_1_1node__delegate" kindref="compound">node_delegate</ref> *</type>
          <declname>del</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="200" column="1" bodyfile="libraries/net/node.cpp" bodystart="4712" bodyend="4716"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a682fe5c9d092497c926896589238d7f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::load_configuration</definition>
        <argsstring>(const fc::path &amp;configuration_directory)</argsstring>
        <name>load_configuration</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>configuration_directory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="202" column="1" bodyfile="libraries/net/node.cpp" bodystart="4718" bodyend="4721"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a6822a9703c8258b2f7fe6d931c1bcead" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::node::listen_to_p2p_network</definition>
        <argsstring>()</argsstring>
        <name>listen_to_p2p_network</name>
        <reimplementedby refid="classgraphene_1_1net_1_1simulated__network_1abd49f968a85f546eb974329cb6639b5f">listen_to_p2p_network</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="204" column="1" bodyfile="libraries/net/node.cpp" bodystart="4723" bodyend="4726"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a9d0cfd3d3e9df5eb378f669c2637fc22" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::node::connect_to_p2p_network</definition>
        <argsstring>()</argsstring>
        <name>connect_to_p2p_network</name>
        <reimplementedby refid="classgraphene_1_1net_1_1simulated__network_1a8cd109059d99e28c7a5d826d4ab7ba97">connect_to_p2p_network</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="205" column="1" bodyfile="libraries/net/node.cpp" bodystart="4728" bodyend="4731"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a1c9efd12182200c318357c0e4b169cb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::add_node</definition>
        <argsstring>(const fc::ip::endpoint &amp;ep)</argsstring>
        <name>add_node</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add endpoint to internal level_map database of potential nodes to attempt to connect to. This database is consulted any time the number connected peers falls below the target. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="212" column="1" bodyfile="libraries/net/node.cpp" bodystart="4733" bodyend="4736"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1ab641ac0582547b4298468240d83835b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::node::connect_to_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;ep)</argsstring>
        <name>connect_to_endpoint</name>
        <reimplementedby refid="classgraphene_1_1net_1_1simulated__network_1a9bab8cb8ba69b7c8c3e4f0d4423b6af9">connect_to_endpoint</reimplementedby>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attempt to connect to the specified endpoint immediately. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="217" column="1" bodyfile="libraries/net/node.cpp" bodystart="4738" bodyend="4741"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a991b591d1102f031ed697e6097881e4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::listen_on_endpoint</definition>
        <argsstring>(const fc::ip::endpoint &amp;ep, bool wait_if_not_available)</argsstring>
        <name>listen_on_endpoint</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>ep</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait_if_not_available</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies the network interface and port upon which incoming connections should be accepted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="223" column="1" bodyfile="libraries/net/node.cpp" bodystart="4743" bodyend="4746"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1ae99e0aa1005c9191147def9f7b1ceaa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::accept_incoming_connections</definition>
        <argsstring>(bool accept)</argsstring>
        <name>accept_incoming_connections</name>
        <param>
          <type>bool</type>
          <declname>accept</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call with true to enable listening for incoming connections </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="228" column="1" bodyfile="libraries/net/node.cpp" bodystart="4748" bodyend="4751"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1aa6b28ef513b383b9f7138667b02184f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::listen_on_port</definition>
        <argsstring>(uint16_t port, bool wait_if_not_available)</argsstring>
        <name>listen_on_port</name>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait_if_not_available</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies the port upon which incoming connections should be accepted. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>the port to listen on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_if_not_available</parametername>
</parameternamelist>
<parameterdescription>
<para>if true and the port is not available, enter a sleep and retry loop to wait for it to become available. If false and the port is not available, just choose a random available port </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="238" column="1" bodyfile="libraries/net/node.cpp" bodystart="4753" bodyend="4756"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a9fef22cd953664b4056cd1f71b6e6d61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref></type>
        <definition>fc::ip::endpoint graphene::net::node::get_actual_listening_endpoint</definition>
        <argsstring>() const</argsstring>
        <name>get_actual_listening_endpoint</name>
        <reimplementedby refid="classgraphene_1_1net_1_1simulated__network_1aeba9b595f3ef9f6e346d3610cc99b204">get_actual_listening_endpoint</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the endpoint the node is listening on. This is usually the same as the value previously passed in to listen_on_endpoint, unless we were unable to bind to that port. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="245" column="1" bodyfile="libraries/net/node.cpp" bodystart="4758" bodyend="4761"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1ab072cf9c0ca8c36b6b6daaa511f9a5c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structgraphene_1_1net_1_1peer__status" kindref="compound">peer_status</ref> &gt;</type>
        <definition>std::vector&lt; peer_status &gt; graphene::net::node::get_connected_peers</definition>
        <argsstring>() const</argsstring>
        <name>get_connected_peers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a list of peers that are currently connected. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="250" column="1" bodyfile="libraries/net/node.cpp" bodystart="4763" bodyend="4766"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1ad1f05e77435c78faf711695e50c54480" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t graphene::net::node::get_connection_count</definition>
        <argsstring>() const</argsstring>
        <name>get_connection_count</name>
        <reimplementedby refid="classgraphene_1_1net_1_1simulated__network_1a8b612cc3a5d5fd840038f3f40b67774b">get_connection_count</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the number of peers we&apos;re actively connected to </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="253" column="1" bodyfile="libraries/net/node.cpp" bodystart="4768" bodyend="4771"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1aa6d4b416eeaf02adb40f698a60649935" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::node::broadcast</definition>
        <argsstring>(const message &amp;item_to_broadcast)</argsstring>
        <name>broadcast</name>
        <reimplementedby refid="classgraphene_1_1net_1_1simulated__network_1ae005a0f7423959e098c534c88c7c18c1">broadcast</reimplementedby>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>item_to_broadcast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add message to outgoing inventory list, notify peers that I have a message ready. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="259" column="1" bodyfile="libraries/net/node.cpp" bodystart="4773" bodyend="4776"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a7db82bafe2fee73c4c81ebc2253f792d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void graphene::net::node::broadcast_transaction</definition>
        <argsstring>(const signed_transaction &amp;trx)</argsstring>
        <name>broadcast_transaction</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1signed__transaction" kindref="compound">signed_transaction</ref> &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="260" column="1" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="260" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a66366a86787aad2a1062b96da4e2555a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void graphene::net::node::sync_from</definition>
        <argsstring>(const item_id &amp;current_head_block, const std::vector&lt; uint32_t &gt; &amp;hard_fork_block_numbers)</argsstring>
        <name>sync_from</name>
        <reimplementedby refid="classgraphene_1_1net_1_1simulated__network_1a4d29256dfb72cac5193da142f1592d16">sync_from</reimplementedby>
        <param>
          <type>const <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">item_id</ref> &amp;</type>
          <declname>current_head_block</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>hard_fork_block_numbers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Node starts the process of fetching all items after <ref refid="structgraphene_1_1net_1_1item__id" kindref="compound">item_id</ref> of the given item_type. During this process messages are not broadcast. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="269" column="1" bodyfile="libraries/net/node.cpp" bodystart="4778" bodyend="4781"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a46a987337a98edfa76dc3b2a4ad88dbf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::net::node::is_connected</definition>
        <argsstring>() const</argsstring>
        <name>is_connected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="271" column="1" bodyfile="libraries/net/node.cpp" bodystart="4783" bodyend="4786"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1aefc421924f961065944cac2217e7934e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::set_advanced_node_parameters</definition>
        <argsstring>(const fc::variant_object &amp;params)</argsstring>
        <name>set_advanced_node_parameters</name>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="273" column="1" bodyfile="libraries/net/node.cpp" bodystart="4793" bodyend="4796"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a18405cc828426c5f8d5055dd9fa5fee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::node::get_advanced_node_parameters</definition>
        <argsstring>()</argsstring>
        <name>get_advanced_node_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="274" column="1" bodyfile="libraries/net/node.cpp" bodystart="4798" bodyend="4801"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a23db84dfcabfef26f118224ee5b197bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1net_1_1message__propagation__data" kindref="compound">message_propagation_data</ref></type>
        <definition>message_propagation_data graphene::net::node::get_transaction_propagation_data</definition>
        <argsstring>(const graphene::protocol::transaction_id_type &amp;transaction_id)</argsstring>
        <name>get_transaction_propagation_data</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a040f9f71bff896e89dc9ee3ff92bb076" kindref="member">graphene::protocol::transaction_id_type</ref> &amp;</type>
          <declname>transaction_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="275" column="1" bodyfile="libraries/net/node.cpp" bodystart="4803" bodyend="4806"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1acbd7f4c3a06ff7f8e3ddd94ca8ffcaaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1net_1_1message__propagation__data" kindref="compound">message_propagation_data</ref></type>
        <definition>message_propagation_data graphene::net::node::get_block_propagation_data</definition>
        <argsstring>(const graphene::protocol::block_id_type &amp;block_id)</argsstring>
        <name>get_block_propagation_data</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" kindref="member">graphene::protocol::block_id_type</ref> &amp;</type>
          <declname>block_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="276" column="1" bodyfile="libraries/net/node.cpp" bodystart="4808" bodyend="4811"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a066ce24a4560d5ec31baf11c1abdcf16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1net_1a557da170930e273d5a42e3541bd768e0" kindref="member">node_id_t</ref></type>
        <definition>node_id_t graphene::net::node::get_node_id</definition>
        <argsstring>() const</argsstring>
        <name>get_node_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="277" column="1" bodyfile="libraries/net/node.cpp" bodystart="4813" bodyend="4816"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a8e1af7fa5454cd1e0d8b44535780c4d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::set_allowed_peers</definition>
        <argsstring>(const std::vector&lt; node_id_t &gt; &amp;allowed_peers)</argsstring>
        <name>set_allowed_peers</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacegraphene_1_1net_1a557da170930e273d5a42e3541bd768e0" kindref="member">node_id_t</ref> &gt; &amp;</type>
          <declname>allowed_peers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="278" column="1" bodyfile="libraries/net/node.cpp" bodystart="4818" bodyend="4821"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a7e4b8fdf179a0bfc9a3046765e1faa4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::clear_peer_database</definition>
        <argsstring>()</argsstring>
        <name>clear_peer_database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instructs the node to forget everything in its peer database, mostly for debugging problems where nodes are failing to connect to the network </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="284" column="1" bodyfile="libraries/net/node.cpp" bodystart="4823" bodyend="4826"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a9e89f58289f44789f8e8bb6157a6f98b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::set_total_bandwidth_limit</definition>
        <argsstring>(uint32_t upload_bytes_per_second, uint32_t download_bytes_per_second)</argsstring>
        <name>set_total_bandwidth_limit</name>
        <param>
          <type>uint32_t</type>
          <declname>upload_bytes_per_second</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>download_bytes_per_second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="286" column="1" bodyfile="libraries/net/node.cpp" bodystart="4828" bodyend="4832"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a747c1dd9ddd21e12d19ba85eb1f2099c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::node::network_get_info</definition>
        <argsstring>() const</argsstring>
        <name>network_get_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="288" column="1" bodyfile="libraries/net/node.cpp" bodystart="4844" bodyend="4847"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a38dfa87ec1909786a9d25d4a8fee9065" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::node::network_get_usage_stats</definition>
        <argsstring>() const</argsstring>
        <name>network_get_usage_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="289" column="1" bodyfile="libraries/net/node.cpp" bodystart="4849" bodyend="4852"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a9701b6bae930a30e3b1a7c2c34211062" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structgraphene_1_1net_1_1potential__peer__record" kindref="compound">potential_peer_record</ref> &gt;</type>
        <definition>std::vector&lt; potential_peer_record &gt; graphene::net::node::get_potential_peers</definition>
        <argsstring>() const</argsstring>
        <name>get_potential_peers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="291" column="1" bodyfile="libraries/net/node.cpp" bodystart="4788" bodyend="4791"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a25635e6a2b617401cb97dd9e036f9a6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::net::node::disable_peer_advertising</definition>
        <argsstring>()</argsstring>
        <name>disable_peer_advertising</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="293" column="1" bodyfile="libraries/net/node.cpp" bodystart="4834" bodyend="4837"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1net_1_1node_1a2f3de66f56468d3f446b91ad65b4de94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
        <definition>fc::variant_object graphene::net::node::get_call_statistics</definition>
        <argsstring>() const</argsstring>
        <name>get_call_statistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/net/include/graphene/net/node.hpp" line="294" column="1" bodyfile="libraries/net/node.cpp" bodystart="4839" bodyend="4842"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>provides application independent P2P broadcast and data synchronization </para>    </briefdescription>
    <detaileddescription>
<para>Unanswered questions: when does the node start establishing network connections and accepting peers? we don&apos;t have enough info to start synchronizing until <ref refid="classgraphene_1_1net_1_1node_1a66366a86787aad2a1062b96da4e2555a" kindref="member">sync_from()</ref> is called, would we have any reason to connect before that? </para>    </detaileddescription>
    <inheritancegraph>
      <node id="4067">
        <label>graphene::net::node</label>
        <link refid="classgraphene_1_1net_1_1node"/>
        <childnode refid="4068" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4069">
        <label>graphene::net::simulated_network</label>
        <link refid="classgraphene_1_1net_1_1simulated__network"/>
        <childnode refid="4067" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4068">
        <label>std::enable_shared_from_this&lt; node &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4070">
        <label>graphene::net::node</label>
        <link refid="classgraphene_1_1net_1_1node"/>
        <childnode refid="4071" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4071">
        <label>std::enable_shared_from_this&lt; node &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libraries/net/include/graphene/net/node.hpp" line="193" column="1" bodyfile="libraries/net/include/graphene/net/node.hpp" bodystart="192" bodyend="297"/>
    <listofallmembers>
      <member refid="classgraphene_1_1net_1_1node_1ae99e0aa1005c9191147def9f7b1ceaa7" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>accept_incoming_connections</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a1c9efd12182200c318357c0e4b169cb9" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>add_node</name></member>
      <member refid="classgraphene_1_1net_1_1node_1aa6d4b416eeaf02adb40f698a60649935" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>broadcast</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a7db82bafe2fee73c4c81ebc2253f792d" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>broadcast_transaction</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a7e4b8fdf179a0bfc9a3046765e1faa4b" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>clear_peer_database</name></member>
      <member refid="classgraphene_1_1net_1_1node_1ac4c9d53582644a76d462f2b9dfbcc778" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>close</name></member>
      <member refid="classgraphene_1_1net_1_1node_1ab641ac0582547b4298468240d83835b5" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>connect_to_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a9d0cfd3d3e9df5eb378f669c2637fc22" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>connect_to_p2p_network</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a25635e6a2b617401cb97dd9e036f9a6d" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>disable_peer_advertising</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a9fef22cd953664b4056cd1f71b6e6d61" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>get_actual_listening_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a18405cc828426c5f8d5055dd9fa5fee8" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_advanced_node_parameters</name></member>
      <member refid="classgraphene_1_1net_1_1node_1acbd7f4c3a06ff7f8e3ddd94ca8ffcaaf" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_block_propagation_data</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a2f3de66f56468d3f446b91ad65b4de94" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_call_statistics</name></member>
      <member refid="classgraphene_1_1net_1_1node_1ab072cf9c0ca8c36b6b6daaa511f9a5c6" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_connected_peers</name></member>
      <member refid="classgraphene_1_1net_1_1node_1ad1f05e77435c78faf711695e50c54480" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>get_connection_count</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a066ce24a4560d5ec31baf11c1abdcf16" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_node_id</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a9701b6bae930a30e3b1a7c2c34211062" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_potential_peers</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a23db84dfcabfef26f118224ee5b197bc" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>get_transaction_propagation_data</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a46a987337a98edfa76dc3b2a4ad88dbf" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>is_connected</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a991b591d1102f031ed697e6097881e4b" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>listen_on_endpoint</name></member>
      <member refid="classgraphene_1_1net_1_1node_1aa6b28ef513b383b9f7138667b02184f1" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>listen_on_port</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a6822a9703c8258b2f7fe6d931c1bcead" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>listen_to_p2p_network</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a682fe5c9d092497c926896589238d7f4" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>load_configuration</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a17244354e74a5790ba51c12ff0a9f820" prot="private" virt="non-virtual"><scope>graphene::net::node</scope><name>my</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a747c1dd9ddd21e12d19ba85eb1f2099c" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>network_get_info</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a38dfa87ec1909786a9d25d4a8fee9065" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>network_get_usage_stats</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a2c669ad34653238449e0dc0f33319281" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>node</name></member>
      <member refid="classgraphene_1_1net_1_1node_1aefc421924f961065944cac2217e7934e" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>set_advanced_node_parameters</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a8e1af7fa5454cd1e0d8b44535780c4d4" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>set_allowed_peers</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a071fd9b43eb2b4adccca649edba6b311" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>set_node_delegate</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a9e89f58289f44789f8e8bb6157a6f98b" prot="public" virt="non-virtual"><scope>graphene::net::node</scope><name>set_total_bandwidth_limit</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a66366a86787aad2a1062b96da4e2555a" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>sync_from</name></member>
      <member refid="classgraphene_1_1net_1_1node_1a4123cfc1660d19fe6c48a468d8daced0" prot="public" virt="virtual"><scope>graphene::net::node</scope><name>~node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
