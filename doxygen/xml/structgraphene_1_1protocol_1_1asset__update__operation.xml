<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgraphene_1_1protocol_1_1asset__update__operation" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::asset_update_operation</compoundname>
    <basecompoundref refid="structgraphene_1_1protocol_1_1base__operation" prot="public" virt="non-virtual">graphene::protocol::base_operation</basecompoundref>
    <includes refid="asset__ops_8hpp" local="no">asset_ops.hpp</includes>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__update__operation_1_1fee__parameters__type" prot="public">graphene::protocol::asset_update_operation::fee_parameters_type</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__update__operation_1aae159a3f90c63125500fa2c63588a71e" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::asset_update_operation::fee</definition>
        <argsstring></argsstring>
        <name>fee</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="288" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__update__operation_1a1b3dd3dc58b03b6e8e6901f2945d85db" prot="public" static="no" mutable="no">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::asset_update_operation::issuer</definition>
        <argsstring></argsstring>
        <name>issuer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="289" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__update__operation_1ae8f6726184da89de514756a405427da5" prot="public" static="no" mutable="no">
        <type>asset_id_type</type>
        <definition>asset_id_type graphene::protocol::asset_update_operation::asset_to_update</definition>
        <argsstring></argsstring>
        <name>asset_to_update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="290" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__update__operation_1af510e9979520868a564a11c85c71d7f4" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; account_id_type &gt;</type>
        <definition>optional&lt;account_id_type&gt; graphene::protocol::asset_update_operation::new_issuer</definition>
        <argsstring></argsstring>
        <name>new_issuer</name>
        <briefdescription>
<para>If the asset is to be given a new issuer, specify his ID here. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="293" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__update__operation_1a8a4c9d5cbae0f5738412109b28f65d19" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset__options" kindref="compound">asset_options</ref></type>
        <definition>asset_options graphene::protocol::asset_update_operation::new_options</definition>
        <argsstring></argsstring>
        <name>new_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="294" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1asset__update__operation_1a14c82eacbd043bdab07b64caecac18e2" prot="public" static="no" mutable="no">
        <type><ref refid="group__operations_1ga10cfb9bd22260c851c06b3b33ac0c512" kindref="member">extensions_type</ref></type>
        <definition>extensions_type graphene::protocol::asset_update_operation::extensions</definition>
        <argsstring></argsstring>
        <name>extensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="295" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset__update__operation_1ae6e6e169f91dce773dd276560a4e7845" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::asset_update_operation::asset_update_operation</definition>
        <argsstring>()</argsstring>
        <name>asset_update_operation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="286" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="286" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset__update__operation_1aaf2122aa59738778113b7edf87391e01" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>account_id_type</type>
        <definition>account_id_type graphene::protocol::asset_update_operation::fee_payer</definition>
        <argsstring>() const</argsstring>
        <name>fee_payer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="297" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset__update__operation_1a7445df10a53a532b8b3bf8a96f4ef0cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::asset_update_operation::validate</definition>
        <argsstring>() const</argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="298" column="1" bodyfile="libraries/protocol/asset_ops.cpp" bodystart="120" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1asset__update__operation_1a26b1654d4b9c2ec807791b10d1406f7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" kindref="member">share_type</ref></type>
        <definition>share_type graphene::protocol::asset_update_operation::calculate_fee</definition>
        <argsstring>(const fee_parameters_type &amp;k) const</argsstring>
        <name>calculate_fee</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset__update__operation_1_1fee__parameters__type" kindref="compound">fee_parameters_type</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="299" column="1" bodyfile="libraries/protocol/asset_ops.cpp" bodystart="137" bodyend="140"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Update options common to all assets</para><para>There are a number of options which all assets in the network use. These options are enumerated in the <ref refid="structgraphene_1_1protocol_1_1asset__options" kindref="compound">asset_options</ref> struct. This operation is used to update these options for an existing asset. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>This operation cannot be used to update BitAsset-specific options. For these options, use <ref refid="structgraphene_1_1protocol_1_1asset__update__bitasset__operation" kindref="compound">asset_update_bitasset_operation</ref> instead.</para></simplesect>
<simplesect kind="pre"><para><ref refid="structgraphene_1_1protocol_1_1asset__update__operation_1a1b3dd3dc58b03b6e8e6901f2945d85db" kindref="member">issuer</ref> SHALL be an existing account and MUST match asset_object::issuer on <ref refid="structgraphene_1_1protocol_1_1asset__update__operation_1ae8f6726184da89de514756a405427da5" kindref="member">asset_to_update</ref> </para></simplesect>
<simplesect kind="pre"><para><ref refid="structgraphene_1_1protocol_1_1asset__update__operation_1aae159a3f90c63125500fa2c63588a71e" kindref="member">fee</ref> SHALL be nonnegative, and <ref refid="structgraphene_1_1protocol_1_1asset__update__operation_1a1b3dd3dc58b03b6e8e6901f2945d85db" kindref="member">issuer</ref> MUST have a sufficient balance to pay it </para></simplesect>
<simplesect kind="pre"><para><ref refid="structgraphene_1_1protocol_1_1asset__update__operation_1a8a4c9d5cbae0f5738412109b28f65d19" kindref="member">new_options</ref> SHALL be internally consistent, as verified by <ref refid="structgraphene_1_1protocol_1_1asset__update__operation_1a7445df10a53a532b8b3bf8a96f4ef0cb" kindref="member">validate()</ref> </para></simplesect>
<simplesect kind="post"><para><ref refid="structgraphene_1_1protocol_1_1asset__update__operation_1ae8f6726184da89de514756a405427da5" kindref="member">asset_to_update</ref> will have options matching those of new_options </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1462">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
      <node id="1461">
        <label>graphene::protocol::asset_update_operation</label>
        <link refid="structgraphene_1_1protocol_1_1asset__update__operation"/>
        <childnode refid="1462" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1471">
        <label>flat_set&lt; asset_id_type &gt;</label>
      </node>
      <node id="1473">
        <label>string</label>
      </node>
      <node id="1465">
        <label>flat_set&lt; future_extensions &gt;</label>
      </node>
      <node id="1474">
        <label>graphene::protocol::price</label>
        <link refid="structgraphene_1_1protocol_1_1price"/>
        <childnode refid="1475" relation="usage">
          <edgelabel>base</edgelabel>
          <edgelabel>quote</edgelabel>
        </childnode>
      </node>
      <node id="1468">
        <label>graphene::protocol::additional_asset_options</label>
        <link refid="structgraphene_1_1protocol_1_1additional__asset__options"/>
        <childnode refid="1469" relation="usage">
          <edgelabel>reward_percent</edgelabel>
        </childnode>
        <childnode refid="1470" relation="usage">
          <edgelabel>whitelist_market_fee_sharing</edgelabel>
        </childnode>
      </node>
      <node id="1470">
        <label>fc::optional&lt; flat_set&lt; account_id_type &gt; &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
      <node id="1476">
        <label>flat_set&lt; account_id_type &gt;</label>
      </node>
      <node id="1472">
        <label>fc::safe&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe"/>
      </node>
      <node id="1466">
        <label>graphene::protocol::asset_options</label>
        <link refid="structgraphene_1_1protocol_1_1asset__options"/>
        <childnode refid="1467" relation="usage">
          <edgelabel>extensions</edgelabel>
        </childnode>
        <childnode refid="1471" relation="usage">
          <edgelabel>whitelist_markets</edgelabel>
          <edgelabel>blacklist_markets</edgelabel>
        </childnode>
        <childnode refid="1472" relation="usage">
          <edgelabel>max_market_fee</edgelabel>
          <edgelabel>max_supply</edgelabel>
        </childnode>
        <childnode refid="1473" relation="usage">
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="1474" relation="usage">
          <edgelabel>core_exchange_rate</edgelabel>
        </childnode>
        <childnode refid="1476" relation="usage">
          <edgelabel>whitelist_authorities</edgelabel>
          <edgelabel>blacklist_authorities</edgelabel>
        </childnode>
      </node>
      <node id="1464">
        <label>graphene::protocol::base_operation</label>
        <link refid="structgraphene_1_1protocol_1_1base__operation"/>
      </node>
      <node id="1463">
        <label>graphene::protocol::asset_update_operation</label>
        <link refid="structgraphene_1_1protocol_1_1asset__update__operation"/>
        <childnode refid="1464" relation="public-inheritance">
        </childnode>
        <childnode refid="1465" relation="usage">
          <edgelabel>extensions</edgelabel>
        </childnode>
        <childnode refid="1466" relation="usage">
          <edgelabel>new_options</edgelabel>
        </childnode>
        <childnode refid="1475" relation="usage">
          <edgelabel>fee</edgelabel>
        </childnode>
        <childnode refid="1477" relation="usage">
          <edgelabel>new_issuer</edgelabel>
        </childnode>
      </node>
      <node id="1475">
        <label>graphene::protocol::asset</label>
        <link refid="structgraphene_1_1protocol_1_1asset"/>
        <childnode refid="1472" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
      <node id="1467">
        <label>graphene::protocol::extension&lt; additional_asset_options &gt;</label>
        <link refid="structgraphene_1_1protocol_1_1extension"/>
        <childnode refid="1468" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="1477">
        <label>fc::optional&lt; account_id_type &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
      <node id="1469">
        <label>fc::optional&lt; uint16_t &gt;</label>
        <link refid="classfc_1_1optional"/>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="280" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="279" bodyend="300"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1asset__update__operation_1ae8f6726184da89de514756a405427da5" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>asset_to_update</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__operation_1ae6e6e169f91dce773dd276560a4e7845" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>asset_update_operation</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1aaccb0fa71ee529cf62324baaa99988fe" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>calculate_data_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__operation_1a26b1654d4b9c2ec807791b10d1406f7f" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a0be44badcee9a648413eb906dac1d3b3" prot="public" virt="non-virtual" ambiguityscope="graphene::protocol::base_operation::"><scope>graphene::protocol::asset_update_operation</scope><name>calculate_fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__operation_1a14c82eacbd043bdab07b64caecac18e2" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>extensions</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__operation_1aae159a3f90c63125500fa2c63588a71e" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>fee</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__operation_1aaf2122aa59738778113b7edf87391e01" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>fee_payer</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a4bde0a7317ece463a0c386315d303b35" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>get_required_active_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a720b8a8ac46c96ef92714110404f65de" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>get_required_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a1882c3b453e9c2021b41827e56005aac" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>get_required_owner_authorities</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__operation_1a1b3dd3dc58b03b6e8e6901f2945d85db" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>issuer</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__operation_1af510e9979520868a564a11c85c71d7f4" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>new_issuer</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__operation_1a8a4c9d5cbae0f5738412109b28f65d19" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>new_options</name></member>
      <member refid="structgraphene_1_1protocol_1_1asset__update__operation_1a7445df10a53a532b8b3bf8a96f4ef0cb" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>validate</name></member>
      <member refid="structgraphene_1_1protocol_1_1base__operation_1a485f3d3b963ff4c081af85945cf27774" prot="public" virt="non-virtual"><scope>graphene::protocol::asset_update_operation</scope><name>validate_parallel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
