<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structfc_1_1reflector" kind="struct" language="C++" prot="public">
    <compoundname>fc::reflector</compoundname>
    <includes refid="reflect_8hpp" local="no">reflect.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structfc_1_1reflector_1a5ce7f9fd0c0e55be9c7772905767c0c7" prot="public" static="no">
        <type>T</type>
        <definition>typedef T fc::reflector&lt; T &gt;::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="35" column="1" bodyfile="libraries/fc/include/fc/reflect/reflect.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfc_1_1reflector_1ac22b0130328be101cc76c96592bc383a" prot="public" static="no">
        <type>std::false_type</type>
        <definition>typedef std::false_type fc::reflector&lt; T &gt;::is_defined</definition>
        <argsstring></argsstring>
        <name>is_defined</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="36" column="1" bodyfile="libraries/fc/include/fc/reflect/reflect.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>defines visit functions for T Unless this is specialized, visit() will not be defined for T. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- the type that will be visited.</para></parameterdescription>
</parameteritem>
</parameterlist>
The <ref refid="reflect_8hpp_1a2ace850e636b1ca0b18fe3177e413d99" kindref="member">FC_REFLECT(TYPE,MEMBERS)</ref> or FC_STATIC_REFLECT_DERIVED(TYPE,BASES,MEMBERS) macro is used to specialize this class for your type. </para>    </detaileddescription>
    <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="34" column="1" bodyfile="libraries/fc/include/fc/reflect/reflect.hpp" bodystart="34" bodyend="64"/>
    <listofallmembers>
      <member refid="structfc_1_1reflector_1ac22b0130328be101cc76c96592bc383a" prot="public" virt="non-virtual"><scope>fc::reflector</scope><name>is_defined</name></member>
      <member refid="structfc_1_1reflector_1a5ce7f9fd0c0e55be9c7772905767c0c7" prot="public" virt="non-virtual"><scope>fc::reflector</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
