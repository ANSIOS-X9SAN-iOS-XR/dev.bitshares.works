<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor" kind="struct" language="C++" prot="public">
    <compoundname>graphene::chain::proposal_operation_hardfork_visitor</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1adb804e5e83320af04f6cdb29b944a36d" prot="public" static="no">
        <type>void</type>
        <definition>typedef void graphene::chain::proposal_operation_hardfork_visitor::result_type</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/proposal_evaluator.cpp" line="36" column="1" bodyfile="libraries/chain/proposal_evaluator.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a49d262acc4a43da659e0aee75d1665d1" prot="public" static="no" mutable="no">
        <type>const fc::time_point_sec</type>
        <definition>const fc::time_point_sec graphene::chain::proposal_operation_hardfork_visitor::block_time</definition>
        <argsstring></argsstring>
        <name>block_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/proposal_evaluator.cpp" line="37" column="1" bodyfile="libraries/chain/proposal_evaluator.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a60e8c44ebd54d5aa07097f0321d48756" prot="public" static="no" mutable="no">
        <type>const fc::time_point_sec</type>
        <definition>const fc::time_point_sec graphene::chain::proposal_operation_hardfork_visitor::next_maintenance_time</definition>
        <argsstring></argsstring>
        <name>next_maintenance_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/proposal_evaluator.cpp" line="38" column="1" bodyfile="libraries/chain/proposal_evaluator.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1ae38da1d6089d0c64992294de675ebba0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::chain::proposal_operation_hardfork_visitor::proposal_operation_hardfork_visitor</definition>
        <argsstring>(const fc::time_point_sec bt, const fc::time_point_sec nmt)</argsstring>
        <name>proposal_operation_hardfork_visitor</name>
        <param>
          <type>const fc::time_point_sec</type>
          <declname>bt</declname>
        </param>
        <param>
          <type>const fc::time_point_sec</type>
          <declname>nmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/proposal_evaluator.cpp" line="40" column="1" bodyfile="libraries/chain/proposal_evaluator.cpp" bodystart="40" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a4b670c3dbd01f7bd5bae1068af9701af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void graphene::chain::proposal_operation_hardfork_visitor::operator()</definition>
        <argsstring>(const T &amp;v) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/proposal_evaluator.cpp" line="44" column="1" bodyfile="libraries/chain/proposal_evaluator.cpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a5a0ca408e157392966a90af280c7367b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::proposal_operation_hardfork_visitor::operator()</definition>
        <argsstring>(const graphene::chain::call_order_update_operation &amp;v) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1call__order__update__operation" kindref="compound">graphene::chain::call_order_update_operation</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/proposal_evaluator.cpp" line="48" column="1" bodyfile="libraries/chain/proposal_evaluator.cpp" bodystart="48" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a56618d4712e99e76d9b423f0f13dac32" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::proposal_operation_hardfork_visitor::operator()</definition>
        <argsstring>(const graphene::chain::asset_create_operation &amp;v) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset__create__operation" kindref="compound">graphene::chain::asset_create_operation</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/proposal_evaluator.cpp" line="55" column="1" bodyfile="libraries/chain/proposal_evaluator.cpp" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a3fc444b535e171ea309090774acc0ae3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::proposal_operation_hardfork_visitor::operator()</definition>
        <argsstring>(const graphene::chain::asset_update_issuer_operation &amp;v) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset__update__issuer__operation" kindref="compound">graphene::chain::asset_update_issuer_operation</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/proposal_evaluator.cpp" line="62" column="1" bodyfile="libraries/chain/proposal_evaluator.cpp" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1ac5323b3cdb79b2aa13c5e6f957e72052" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::proposal_operation_hardfork_visitor::operator()</definition>
        <argsstring>(const graphene::chain::asset_claim_pool_operation &amp;v) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset__claim__pool__operation" kindref="compound">graphene::chain::asset_claim_pool_operation</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/proposal_evaluator.cpp" line="68" column="1" bodyfile="libraries/chain/proposal_evaluator.cpp" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a20e3afcb35c0dfd43812d97692fb6a48" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::proposal_operation_hardfork_visitor::operator()</definition>
        <argsstring>(const graphene::chain::asset_settle_cancel_operation &amp;v) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1asset__settle__cancel__operation" kindref="compound">graphene::chain::asset_settle_cancel_operation</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/proposal_evaluator.cpp" line="92" column="1" bodyfile="libraries/chain/proposal_evaluator.cpp" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a8198469d601b9c7fd58e91ce7044398b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::chain::proposal_operation_hardfork_visitor::operator()</definition>
        <argsstring>(const graphene::chain::proposal_create_operation &amp;v) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="structgraphene_1_1chain_1_1proposal__create__operation" kindref="compound">graphene::chain::proposal_create_operation</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/chain/proposal_evaluator.cpp" line="98" column="1" bodyfile="libraries/chain/proposal_evaluator.cpp" bodystart="98" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/chain/proposal_evaluator.cpp" line="35" column="1" bodyfile="libraries/chain/proposal_evaluator.cpp" bodystart="34" bodyend="102"/>
    <listofallmembers>
      <member refid="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a49d262acc4a43da659e0aee75d1665d1" prot="public" virt="non-virtual"><scope>graphene::chain::proposal_operation_hardfork_visitor</scope><name>block_time</name></member>
      <member refid="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a60e8c44ebd54d5aa07097f0321d48756" prot="public" virt="non-virtual"><scope>graphene::chain::proposal_operation_hardfork_visitor</scope><name>next_maintenance_time</name></member>
      <member refid="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a4b670c3dbd01f7bd5bae1068af9701af" prot="public" virt="non-virtual"><scope>graphene::chain::proposal_operation_hardfork_visitor</scope><name>operator()</name></member>
      <member refid="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a5a0ca408e157392966a90af280c7367b" prot="public" virt="non-virtual"><scope>graphene::chain::proposal_operation_hardfork_visitor</scope><name>operator()</name></member>
      <member refid="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a56618d4712e99e76d9b423f0f13dac32" prot="public" virt="non-virtual"><scope>graphene::chain::proposal_operation_hardfork_visitor</scope><name>operator()</name></member>
      <member refid="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a3fc444b535e171ea309090774acc0ae3" prot="public" virt="non-virtual"><scope>graphene::chain::proposal_operation_hardfork_visitor</scope><name>operator()</name></member>
      <member refid="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1ac5323b3cdb79b2aa13c5e6f957e72052" prot="public" virt="non-virtual"><scope>graphene::chain::proposal_operation_hardfork_visitor</scope><name>operator()</name></member>
      <member refid="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a20e3afcb35c0dfd43812d97692fb6a48" prot="public" virt="non-virtual"><scope>graphene::chain::proposal_operation_hardfork_visitor</scope><name>operator()</name></member>
      <member refid="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1a8198469d601b9c7fd58e91ce7044398b" prot="public" virt="non-virtual"><scope>graphene::chain::proposal_operation_hardfork_visitor</scope><name>operator()</name></member>
      <member refid="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1ae38da1d6089d0c64992294de675ebba0" prot="public" virt="non-virtual"><scope>graphene::chain::proposal_operation_hardfork_visitor</scope><name>proposal_operation_hardfork_visitor</name></member>
      <member refid="structgraphene_1_1chain_1_1proposal__operation__hardfork__visitor_1adb804e5e83320af04f6cdb29b944a36d" prot="public" virt="non-virtual"><scope>graphene::chain::proposal_operation_hardfork_visitor</scope><name>result_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
