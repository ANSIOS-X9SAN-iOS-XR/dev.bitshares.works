<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="base__n__tests_8cpp" kind="file" language="C++">
    <compoundname>base_n_tests.cpp</compoundname>
    <includes local="no">boost/test/unit_test.hpp</includes>
    <includes refid="hex_8hpp" local="no">fc/crypto/hex.hpp</includes>
    <includes refid="base58_8hpp" local="no">fc/crypto/base58.hpp</includes>
    <includes refid="base64_8hpp" local="no">fc/crypto/base64.hpp</includes>
    <includes refid="exception_8hpp" local="no">fc/exception/exception.hpp</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="38560">
        <label>boost/endian/buffers.hpp</label>
      </node>
      <node id="38564">
        <label>functional</label>
      </node>
      <node id="38537">
        <label>boost/preprocessor/seq/seq.hpp</label>
      </node>
      <node id="38528">
        <label>assert.h</label>
      </node>
      <node id="38527">
        <label>fc/optional.hpp</label>
        <link refid="optional_8hpp"/>
        <childnode refid="38528" relation="include">
        </childnode>
        <childnode refid="38529" relation="include">
        </childnode>
      </node>
      <node id="38533">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="38521">
        <label>fc/crypto/base58.hpp</label>
        <link refid="base58_8hpp"/>
        <childnode refid="38519" relation="include">
        </childnode>
        <childnode refid="38520" relation="include">
        </childnode>
      </node>
      <node id="38516">
        <label>boost/test/unit_test.hpp</label>
      </node>
      <node id="38531">
        <label>fc/string.hpp</label>
        <link refid="string_8hpp"/>
        <childnode refid="38532" relation="include">
        </childnode>
        <childnode refid="38527" relation="include">
        </childnode>
        <childnode refid="38519" relation="include">
        </childnode>
      </node>
      <node id="38525">
        <label>fc/config.hpp</label>
        <link refid="fc_2include_2fc_2config_8hpp"/>
      </node>
      <node id="38518">
        <label>stdint.h</label>
      </node>
      <node id="38546">
        <label>fc/container/flat_fwd.hpp</label>
        <link refid="flat__fwd_8hpp"/>
        <childnode refid="38547" relation="include">
        </childnode>
        <childnode refid="38548" relation="include">
        </childnode>
        <childnode refid="38549" relation="include">
        </childnode>
        <childnode refid="38525" relation="include">
        </childnode>
      </node>
      <node id="38524">
        <label>fc/log/logger.hpp</label>
        <link refid="logger_8hpp"/>
        <childnode refid="38525" relation="include">
        </childnode>
        <childnode refid="38526" relation="include">
        </childnode>
        <childnode refid="38550" relation="include">
        </childnode>
        <childnode refid="38552" relation="include">
        </childnode>
        <childnode refid="38555" relation="include">
        </childnode>
        <childnode refid="38551" relation="include">
        </childnode>
        <childnode refid="38534" relation="include">
        </childnode>
        <childnode refid="38535" relation="include">
        </childnode>
        <childnode refid="38536" relation="include">
        </childnode>
        <childnode refid="38537" relation="include">
        </childnode>
        <childnode refid="38538" relation="include">
        </childnode>
        <childnode refid="38562" relation="include">
        </childnode>
      </node>
      <node id="38519">
        <label>string</label>
      </node>
      <node id="38544">
        <label>map</label>
      </node>
      <node id="38557">
        <label>unordered_set</label>
      </node>
      <node id="38550">
        <label>fc/log/appender.hpp</label>
        <link refid="appender_8hpp"/>
        <childnode refid="38551" relation="include">
        </childnode>
        <childnode refid="38519" relation="include">
        </childnode>
      </node>
      <node id="38562">
        <label>boost/preprocessor/punctuation/paren.hpp</label>
      </node>
      <node id="38563">
        <label>exception</label>
      </node>
      <node id="38552">
        <label>fc/log/log_message.hpp</label>
        <link refid="log__message_8hpp"/>
        <childnode refid="38525" relation="include">
        </childnode>
        <childnode refid="38526" relation="include">
        </childnode>
        <childnode refid="38553" relation="include">
        </childnode>
        <childnode refid="38551" relation="include">
        </childnode>
        <childnode refid="38519" relation="include">
        </childnode>
      </node>
      <node id="38561">
        <label>boost/multi_index_container_fwd.hpp</label>
      </node>
      <node id="38554">
        <label>fc/variant.hpp</label>
        <link refid="variant_8hpp"/>
        <childnode refid="38542" relation="include">
        </childnode>
        <childnode refid="38555" relation="include">
        </childnode>
        <childnode refid="38543" relation="include">
        </childnode>
        <childnode refid="38544" relation="include">
        </childnode>
        <childnode refid="38551" relation="include">
        </childnode>
        <childnode refid="38545" relation="include">
        </childnode>
        <childnode refid="38556" relation="include">
        </childnode>
        <childnode refid="38557" relation="include">
        </childnode>
        <childnode refid="38520" relation="include">
        </childnode>
        <childnode refid="38539" relation="include">
        </childnode>
        <childnode refid="38527" relation="include">
        </childnode>
        <childnode refid="38558" relation="include">
        </childnode>
        <childnode refid="38546" relation="include">
        </childnode>
        <childnode refid="38517" relation="include">
        </childnode>
        <childnode refid="38560" relation="include">
        </childnode>
        <childnode refid="38561" relation="include">
        </childnode>
        <childnode refid="38530" relation="include">
        </childnode>
      </node>
      <node id="38526">
        <label>fc/time.hpp</label>
        <link refid="time_8hpp"/>
        <childnode refid="38518" relation="include">
        </childnode>
        <childnode refid="38519" relation="include">
        </childnode>
        <childnode refid="38527" relation="include">
        </childnode>
        <childnode refid="38530" relation="include">
        </childnode>
      </node>
      <node id="38538">
        <label>boost/preprocessor/stringize.hpp</label>
      </node>
      <node id="38536">
        <label>boost/preprocessor/seq/size.hpp</label>
      </node>
      <node id="38558">
        <label>fc/uint128.hpp</label>
        <link refid="uint128_8hpp"/>
        <childnode refid="38559" relation="include">
        </childnode>
      </node>
      <node id="38522">
        <label>fc/crypto/base64.hpp</label>
        <link refid="base64_8hpp"/>
        <childnode refid="38519" relation="include">
        </childnode>
      </node>
      <node id="38517">
        <label>fc/crypto/hex.hpp</label>
        <link refid="hex_8hpp"/>
        <childnode refid="38518" relation="include">
        </childnode>
        <childnode refid="38519" relation="include">
        </childnode>
        <childnode refid="38520" relation="include">
        </childnode>
      </node>
      <node id="38549">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="38532">
        <label>fc/fwd.hpp</label>
        <link refid="fwd_8hpp"/>
      </node>
      <node id="38539">
        <label>string.h</label>
      </node>
      <node id="38548">
        <label>boost/container/flat_set.hpp</label>
      </node>
      <node id="38553">
        <label>fc/variant_object.hpp</label>
        <link refid="variant__object_8hpp"/>
        <childnode refid="38554" relation="include">
        </childnode>
        <childnode refid="38551" relation="include">
        </childnode>
      </node>
      <node id="38541">
        <label>fc/reflect/typename.hpp</label>
        <link refid="typename_8hpp"/>
        <childnode refid="38542" relation="include">
        </childnode>
        <childnode refid="38543" relation="include">
        </childnode>
        <childnode refid="38544" relation="include">
        </childnode>
        <childnode refid="38545" relation="include">
        </childnode>
        <childnode refid="38519" relation="include">
        </childnode>
        <childnode refid="38520" relation="include">
        </childnode>
        <childnode refid="38527" relation="include">
        </childnode>
        <childnode refid="38531" relation="include">
        </childnode>
        <childnode refid="38546" relation="include">
        </childnode>
      </node>
      <node id="38520">
        <label>vector</label>
      </node>
      <node id="38515">
        <label>libraries/fc/tests/crypto/base_n_tests.cpp</label>
        <link refid="base__n__tests_8cpp"/>
        <childnode refid="38516" relation="include">
        </childnode>
        <childnode refid="38517" relation="include">
        </childnode>
        <childnode refid="38521" relation="include">
        </childnode>
        <childnode refid="38522" relation="include">
        </childnode>
        <childnode refid="38523" relation="include">
        </childnode>
        <childnode refid="38565" relation="include">
        </childnode>
      </node>
      <node id="38523">
        <label>fc/exception/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="38524" relation="include">
        </childnode>
        <childnode refid="38527" relation="include">
        </childnode>
        <childnode refid="38563" relation="include">
        </childnode>
        <childnode refid="38564" relation="include">
        </childnode>
        <childnode refid="38556" relation="include">
        </childnode>
      </node>
      <node id="38529">
        <label>utility</label>
      </node>
      <node id="38542">
        <label>array</label>
      </node>
      <node id="38559">
        <label>boost/multiprecision/integer.hpp</label>
      </node>
      <node id="38565">
        <label>iostream</label>
      </node>
      <node id="38555">
        <label>cstddef</label>
      </node>
      <node id="38543">
        <label>deque</label>
      </node>
      <node id="38556">
        <label>unordered_map</label>
      </node>
      <node id="38535">
        <label>boost/preprocessor/seq/enum.hpp</label>
      </node>
      <node id="38547">
        <label>boost/container/flat_map.hpp</label>
      </node>
      <node id="38530">
        <label>fc/reflect/reflect.hpp</label>
        <link refid="reflect_8hpp"/>
        <childnode refid="38531" relation="include">
        </childnode>
        <childnode refid="38533" relation="include">
        </childnode>
        <childnode refid="38534" relation="include">
        </childnode>
        <childnode refid="38535" relation="include">
        </childnode>
        <childnode refid="38536" relation="include">
        </childnode>
        <childnode refid="38537" relation="include">
        </childnode>
        <childnode refid="38538" relation="include">
        </childnode>
        <childnode refid="38518" relation="include">
        </childnode>
        <childnode refid="38539" relation="include">
        </childnode>
        <childnode refid="38540" relation="include">
        </childnode>
        <childnode refid="38541" relation="include">
        </childnode>
      </node>
      <node id="38540">
        <label>type_traits</label>
      </node>
      <node id="38545">
        <label>set</label>
      </node>
      <node id="38551">
        <label>memory</label>
      </node>
      <node id="38534">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="base__n__tests_8cpp_1a1a4ef11d66976c3e40610e55e0922a18" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>static const std::string TEST1</definition>
        <argsstring>(&quot;&quot;)</argsstring>
        <name>TEST1</name>
        <param>
          <type>&quot;&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/tests/crypto/base_n_tests.cpp" line="10" column="1"/>
      </memberdef>
      <memberdef kind="function" id="base__n__tests_8cpp_1ac187e039e62c73631ba8f9f60cf2e5d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>static const std::string TEST2</definition>
        <argsstring>(&quot;\0101&quot;, 4)</argsstring>
        <name>TEST2</name>
        <param>
          <type>&quot;\01&quot;</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/tests/crypto/base_n_tests.cpp" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="base__n__tests_8cpp_1adfa1b4e95a566a1ceb8a2fc3bcc4241f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>static const std::string TEST3</definition>
        <argsstring>(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;)</argsstring>
        <name>TEST3</name>
        <param>
          <type>&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/tests/crypto/base_n_tests.cpp" line="12" column="1"/>
      </memberdef>
      <memberdef kind="function" id="base__n__tests_8cpp_1a379d31a98246eb7691e90841f6dc94b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>static const std::string TEST4</definition>
        <argsstring>(&quot;\7\6\0\5\1\4&quot;, 6)</argsstring>
        <name>TEST4</name>
        <param>
          <type>&quot;\\\&quot;</type>
        </param>
        <param>
          <type>6</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/tests/crypto/base_n_tests.cpp" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="base__n__tests_8cpp_1a9d2c30e35003349a232b96f4614237d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>static const std::string TEST5</definition>
        <argsstring>(&quot;\\, 3)</argsstring>
        <name>TEST5</name>
        <param>
          <type>&quot;\</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/tests/crypto/base_n_tests.cpp" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="base__n__tests_8cpp_1a31087d83cc128c29ce875bb43c6b33f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_16</definition>
        <argsstring>(const std::string &amp;test, const std::string &amp;expected)</argsstring>
        <name>test_16</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>test</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/tests/crypto/base_n_tests.cpp" line="16" column="1" bodyfile="libraries/fc/tests/crypto/base_n_tests.cpp" bodystart="16" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="base__n__tests_8cpp_1a440e7bd6a6a4ef0c68bfa320d695d459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(hex_test)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>hex_test</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/tests/crypto/base_n_tests.cpp" line="35" column="1" bodyfile="libraries/fc/tests/crypto/base_n_tests.cpp" bodystart="35" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="base__n__tests_8cpp_1ab9f4f001836a3a645c779b0834b2babd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_58</definition>
        <argsstring>(const std::string &amp;test, const std::string &amp;expected)</argsstring>
        <name>test_58</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>test</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/tests/crypto/base_n_tests.cpp" line="45" column="1" bodyfile="libraries/fc/tests/crypto/base_n_tests.cpp" bodystart="45" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="base__n__tests_8cpp_1ad8d60e7d978b5d66a01a19bf4d59fca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(base58_test)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>base58_test</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/tests/crypto/base_n_tests.cpp" line="67" column="1" bodyfile="libraries/fc/tests/crypto/base_n_tests.cpp" bodystart="67" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="base__n__tests_8cpp_1af06b0fb30fe010a29f51fa2a405d6e0a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_64</definition>
        <argsstring>(const std::string &amp;test, const std::string &amp;expected)</argsstring>
        <name>test_64</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>test</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/tests/crypto/base_n_tests.cpp" line="77" column="1" bodyfile="libraries/fc/tests/crypto/base_n_tests.cpp" bodystart="77" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="base__n__tests_8cpp_1a57f51af1e92bb916cac521d7792aacd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(base64_test)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>base64_test</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/tests/crypto/base_n_tests.cpp" line="89" column="1" bodyfile="libraries/fc/tests/crypto/base_n_tests.cpp" bodystart="89" bodyend="96"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/tests/crypto/base_n_tests.cpp"/>
  </compounddef>
</doxygen>
