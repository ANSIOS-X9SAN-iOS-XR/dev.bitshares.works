<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfc_1_1bloom__filter" kind="class" language="C++" prot="public">
    <compoundname>fc::bloom_filter</compoundname>
    <includes refid="bloom__filter_8hpp" local="no">bloom_filter.hpp</includes>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classfc_1_1bloom__filter_1af12d535213b1ff5966b9a61b4237a5d4" prot="protected" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int fc::bloom_filter::bloom_type</definition>
        <argsstring></argsstring>
        <name>bloom_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="179" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classfc_1_1bloom__filter_1a543c4ce28a4fedb25557bd977a657ac7" prot="protected" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char fc::bloom_filter::cell_type</definition>
        <argsstring></argsstring>
        <name>cell_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="180" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classfc_1_1bloom__filter_1a4aa68713801e124ed96fdeb6acdc91da" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classfc_1_1bloom__filter_1af12d535213b1ff5966b9a61b4237a5d4" kindref="member">bloom_type</ref> &gt;</type>
        <definition>std::vector&lt;bloom_type&gt; fc::bloom_filter::salt_</definition>
        <argsstring></argsstring>
        <name>salt_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="585" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="585" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1bloom__filter_1a1456955c8ec72e48d83454a3a82a7a59" prot="public" static="no" mutable="no">
        <type>std::vector&lt; unsigned char &gt;</type>
        <definition>std::vector&lt;unsigned char&gt; fc::bloom_filter::bit_table_</definition>
        <argsstring></argsstring>
        <name>bit_table_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="586" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1bloom__filter_1a0ce6a19263b4df2b9b8ef1170603507b" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int fc::bloom_filter::salt_count_</definition>
        <argsstring></argsstring>
        <name>salt_count_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="587" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1bloom__filter_1a7288d926a8bfe6e783b65641e84b4c64" prot="public" static="no" mutable="no">
        <type>unsigned long long int</type>
        <definition>unsigned long long int fc::bloom_filter::table_size_</definition>
        <argsstring></argsstring>
        <name>table_size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="588" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1bloom__filter_1abf3a0473b9cf4df2c4f000ca87f6649d" prot="public" static="no" mutable="no">
        <type>unsigned long long int</type>
        <definition>unsigned long long int fc::bloom_filter::raw_table_size_</definition>
        <argsstring></argsstring>
        <name>raw_table_size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="589" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1bloom__filter_1aa60f2c26fc7e77e3757e11649ddb68df" prot="public" static="no" mutable="no">
        <type>unsigned long long int</type>
        <definition>unsigned long long int fc::bloom_filter::projected_element_count_</definition>
        <argsstring></argsstring>
        <name>projected_element_count_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="590" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1bloom__filter_1aeb75fe01b8b19f559c8ea27c2e6e54b6" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int fc::bloom_filter::inserted_element_count_</definition>
        <argsstring></argsstring>
        <name>inserted_element_count_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="591" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1bloom__filter_1afca8eb2c8812ac907106407a5e9324da" prot="public" static="no" mutable="no">
        <type>unsigned long long int</type>
        <definition>unsigned long long int fc::bloom_filter::random_seed_</definition>
        <argsstring></argsstring>
        <name>random_seed_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="592" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="592" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfc_1_1bloom__filter_1ae5376d38d0df19b97e30172e9b7f9d64" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double fc::bloom_filter::desired_false_positive_probability_</definition>
        <argsstring></argsstring>
        <name>desired_false_positive_probability_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="593" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="593" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a7e7427cbb9e7cf1fe3b293ed18db0a8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::bloom_filter::bloom_filter</definition>
        <argsstring>()</argsstring>
        <name>bloom_filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="184" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="184" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1abfb929dc1b4099975cbd770e94df393b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::bloom_filter::bloom_filter</definition>
        <argsstring>(const bloom_parameters &amp;p)</argsstring>
        <name>bloom_filter</name>
        <param>
          <type>const <ref refid="classfc_1_1bloom__parameters" kindref="compound">bloom_parameters</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="194" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="194" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a2a3dc854d9e13ba0959b88bbbc4a95f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fc::bloom_filter::bloom_filter</definition>
        <argsstring>(const bloom_filter &amp;filter)</argsstring>
        <name>bloom_filter</name>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="210" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a84ebbb3010a0ec2bfba07738deb7990b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::bloom_filter::operator==</definition>
        <argsstring>(const bloom_filter &amp;f) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="215" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="215" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1ae8f909c2a5c07dfeb84438dfbacbadd5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::bloom_filter::operator!=</definition>
        <argsstring>(const bloom_filter &amp;f) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="234" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1aaa5d5b00255f6b03da2f46d49524eeda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
        <definition>bloom_filter&amp; fc::bloom_filter::operator=</definition>
        <argsstring>(const bloom_filter &amp;f)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="239" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="239" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1ad2dae7aae11aad2bc1d7399eaa4692fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual fc::bloom_filter::~bloom_filter</definition>
        <argsstring>()</argsstring>
        <name>~bloom_filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="257" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a948856dcae6bdd746147a2e7ffa6e09b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::bloom_filter::operator!</definition>
        <argsstring>() const</argsstring>
        <name>operator!</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="261" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a4ec7826f181bf204946cec0ef2b27842" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::bloom_filter::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="266" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="266" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a024a01a04bcfef5c6fb20c0a29022b08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::bloom_filter::insert</definition>
        <argsstring>(const unsigned char *key_begin, const std::size_t &amp;length)</argsstring>
        <name>insert</name>
        <param>
          <type>const unsigned char *</type>
          <declname>key_begin</declname>
        </param>
        <param>
          <type>const std::size_t &amp;</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="272" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="272" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a64116c7139c55bfbea36662e5c5e5c91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::bloom_filter::insert</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>insert</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="285" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="285" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a4094b9d7a34d14c55d1cf61be2d6d019" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::bloom_filter::insert</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>insert</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="291" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="291" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a6573afbce511a80567622577f26808f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::bloom_filter::insert</definition>
        <argsstring>(const char *data, const std::size_t &amp;length)</argsstring>
        <name>insert</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::size_t &amp;</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="296" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a9c3b1a6d79deb07f906e836dd97ee696" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::bloom_filter::insert</definition>
        <argsstring>(const InputIterator begin, const InputIterator end)</argsstring>
        <name>insert</name>
        <param>
          <type>const InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const InputIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="302" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="302" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a7a533ef13bc53b922afe050c23bd7095" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool fc::bloom_filter::contains</definition>
        <argsstring>(const unsigned char *key_begin, const std::size_t length) const</argsstring>
        <name>contains</name>
        <param>
          <type>const unsigned char *</type>
          <declname>key_begin</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="311" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="311" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a8d8fa605fe3266a8381b3d89bd39dbf0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool fc::bloom_filter::contains</definition>
        <argsstring>(const T &amp;t) const</argsstring>
        <name>contains</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="327" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a8cfa671af82c4429140315c16312f8f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::bloom_filter::contains</definition>
        <argsstring>(const std::string &amp;key) const</argsstring>
        <name>contains</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="332" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a804653831725e9cf0fa9d6e7172c92e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::bloom_filter::contains</definition>
        <argsstring>(const char *data, const std::size_t &amp;length) const</argsstring>
        <name>contains</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::size_t &amp;</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="337" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a563940aeaaa3889a52b9e78fa18fbed2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>InputIterator</type>
        <definition>InputIterator fc::bloom_filter::contains_all</definition>
        <argsstring>(const InputIterator begin, const InputIterator end) const</argsstring>
        <name>contains_all</name>
        <param>
          <type>const InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const InputIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="343" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="343" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a4bd29f86037d8faf5caa6dfa5eca7a15" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>InputIterator</type>
        <definition>InputIterator fc::bloom_filter::contains_none</definition>
        <argsstring>(const InputIterator begin, const InputIterator end) const</argsstring>
        <name>contains_none</name>
        <param>
          <type>const InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const InputIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="358" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="358" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a2ce933340ddf63a8c99599d26877d62b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>unsigned long long int</type>
        <definition>virtual unsigned long long int fc::bloom_filter::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="372" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a428146893da62df826a82c0114bb1a1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t fc::bloom_filter::element_count</definition>
        <argsstring>() const</argsstring>
        <name>element_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="377" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a5aa4a5e6c72746145eea809fb547a697" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double fc::bloom_filter::effective_fpp</definition>
        <argsstring>() const</argsstring>
        <name>effective_fpp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="382" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="382" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a0a1558ba9af650018ff2c221bf09f840" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
        <definition>bloom_filter&amp; fc::bloom_filter::operator &amp;=</definition>
        <argsstring>(const bloom_filter &amp;f)</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="394" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="394" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a5814c50d4a7ef4f75289c5e8b187cb62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
        <definition>bloom_filter&amp; fc::bloom_filter::operator|=</definition>
        <argsstring>(const bloom_filter &amp;f)</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="411" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="411" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a3050a30e8b36af958818961ab826d439" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
        <definition>bloom_filter&amp; fc::bloom_filter::operator^=</definition>
        <argsstring>(const bloom_filter &amp;f)</argsstring>
        <name>operator^=</name>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="428" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="428" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a9887b49deeaa1ccaad2aee40b86dddbd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classfc_1_1bloom__filter_1a543c4ce28a4fedb25557bd977a657ac7" kindref="member">cell_type</ref> *</type>
        <definition>const cell_type* fc::bloom_filter::table</definition>
        <argsstring>() const</argsstring>
        <name>table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="445" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="445" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1ae07d22fd8cad4d753e4dfd67132c5e7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t fc::bloom_filter::hash_count</definition>
        <argsstring>()</argsstring>
        <name>hash_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="450" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="450" bodyend="453"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a782a4ca932e2f8a03b11dd41652a5e69" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void fc::bloom_filter::compute_indices</definition>
        <argsstring>(const bloom_type &amp;hash, std::size_t &amp;bit_index, std::size_t &amp;bit) const</argsstring>
        <name>compute_indices</name>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter_1af12d535213b1ff5966b9a61b4237a5d4" kindref="member">bloom_type</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>std::size_t &amp;</type>
          <declname>bit_index</declname>
        </param>
        <param>
          <type>std::size_t &amp;</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="457" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="457" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a8f2e62c9d3c975c761d37669e92c38db" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::bloom_filter::generate_unique_salt</definition>
        <argsstring>()</argsstring>
        <name>generate_unique_salt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="463" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="463" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classfc_1_1bloom__filter_1a953b432cacd40b9d2493ff910b0672fa" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1bloom__filter_1af12d535213b1ff5966b9a61b4237a5d4" kindref="member">bloom_type</ref></type>
        <definition>bloom_type fc::bloom_filter::hash_ap</definition>
        <argsstring>(const unsigned char *begin, std::size_t remaining_length, bloom_type hash) const</argsstring>
        <name>hash_ap</name>
        <param>
          <type>const unsigned char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>remaining_length</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1bloom__filter_1af12d535213b1ff5966b9a61b4237a5d4" kindref="member">bloom_type</ref></type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="540" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="540" bodyend="582"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/fc/include/fc/bloom_filter.hpp" line="176" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="175" bodyend="594"/>
    <listofallmembers>
      <member refid="classfc_1_1bloom__filter_1a1456955c8ec72e48d83454a3a82a7a59" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>bit_table_</name></member>
      <member refid="classfc_1_1bloom__filter_1a7e7427cbb9e7cf1fe3b293ed18db0a8e" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>bloom_filter</name></member>
      <member refid="classfc_1_1bloom__filter_1abfb929dc1b4099975cbd770e94df393b" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>bloom_filter</name></member>
      <member refid="classfc_1_1bloom__filter_1a2a3dc854d9e13ba0959b88bbbc4a95f5" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>bloom_filter</name></member>
      <member refid="classfc_1_1bloom__filter_1af12d535213b1ff5966b9a61b4237a5d4" prot="protected" virt="non-virtual"><scope>fc::bloom_filter</scope><name>bloom_type</name></member>
      <member refid="classfc_1_1bloom__filter_1a543c4ce28a4fedb25557bd977a657ac7" prot="protected" virt="non-virtual"><scope>fc::bloom_filter</scope><name>cell_type</name></member>
      <member refid="classfc_1_1bloom__filter_1a4ec7826f181bf204946cec0ef2b27842" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>clear</name></member>
      <member refid="classfc_1_1bloom__filter_1a782a4ca932e2f8a03b11dd41652a5e69" prot="protected" virt="virtual"><scope>fc::bloom_filter</scope><name>compute_indices</name></member>
      <member refid="classfc_1_1bloom__filter_1a7a533ef13bc53b922afe050c23bd7095" prot="public" virt="virtual"><scope>fc::bloom_filter</scope><name>contains</name></member>
      <member refid="classfc_1_1bloom__filter_1a8d8fa605fe3266a8381b3d89bd39dbf0" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>contains</name></member>
      <member refid="classfc_1_1bloom__filter_1a8cfa671af82c4429140315c16312f8f2" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>contains</name></member>
      <member refid="classfc_1_1bloom__filter_1a804653831725e9cf0fa9d6e7172c92e0" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>contains</name></member>
      <member refid="classfc_1_1bloom__filter_1a563940aeaaa3889a52b9e78fa18fbed2" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>contains_all</name></member>
      <member refid="classfc_1_1bloom__filter_1a4bd29f86037d8faf5caa6dfa5eca7a15" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>contains_none</name></member>
      <member refid="classfc_1_1bloom__filter_1ae5376d38d0df19b97e30172e9b7f9d64" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>desired_false_positive_probability_</name></member>
      <member refid="classfc_1_1bloom__filter_1a5aa4a5e6c72746145eea809fb547a697" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>effective_fpp</name></member>
      <member refid="classfc_1_1bloom__filter_1a428146893da62df826a82c0114bb1a1f" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>element_count</name></member>
      <member refid="classfc_1_1bloom__filter_1a8f2e62c9d3c975c761d37669e92c38db" prot="protected" virt="non-virtual"><scope>fc::bloom_filter</scope><name>generate_unique_salt</name></member>
      <member refid="classfc_1_1bloom__filter_1a953b432cacd40b9d2493ff910b0672fa" prot="protected" virt="non-virtual"><scope>fc::bloom_filter</scope><name>hash_ap</name></member>
      <member refid="classfc_1_1bloom__filter_1ae07d22fd8cad4d753e4dfd67132c5e7d" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>hash_count</name></member>
      <member refid="classfc_1_1bloom__filter_1a024a01a04bcfef5c6fb20c0a29022b08" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>insert</name></member>
      <member refid="classfc_1_1bloom__filter_1a64116c7139c55bfbea36662e5c5e5c91" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>insert</name></member>
      <member refid="classfc_1_1bloom__filter_1a4094b9d7a34d14c55d1cf61be2d6d019" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>insert</name></member>
      <member refid="classfc_1_1bloom__filter_1a6573afbce511a80567622577f26808f6" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>insert</name></member>
      <member refid="classfc_1_1bloom__filter_1a9c3b1a6d79deb07f906e836dd97ee696" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>insert</name></member>
      <member refid="classfc_1_1bloom__filter_1aeb75fe01b8b19f559c8ea27c2e6e54b6" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>inserted_element_count_</name></member>
      <member refid="classfc_1_1bloom__filter_1a948856dcae6bdd746147a2e7ffa6e09b" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>operator!</name></member>
      <member refid="classfc_1_1bloom__filter_1ae8f909c2a5c07dfeb84438dfbacbadd5" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>operator!=</name></member>
      <member refid="classfc_1_1bloom__filter_1a0a1558ba9af650018ff2c221bf09f840" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>operator&amp;=</name></member>
      <member refid="classfc_1_1bloom__filter_1aaa5d5b00255f6b03da2f46d49524eeda" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>operator=</name></member>
      <member refid="classfc_1_1bloom__filter_1a84ebbb3010a0ec2bfba07738deb7990b" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>operator==</name></member>
      <member refid="classfc_1_1bloom__filter_1a3050a30e8b36af958818961ab826d439" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>operator^=</name></member>
      <member refid="classfc_1_1bloom__filter_1a5814c50d4a7ef4f75289c5e8b187cb62" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>operator|=</name></member>
      <member refid="classfc_1_1bloom__filter_1aa60f2c26fc7e77e3757e11649ddb68df" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>projected_element_count_</name></member>
      <member refid="classfc_1_1bloom__filter_1afca8eb2c8812ac907106407a5e9324da" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>random_seed_</name></member>
      <member refid="classfc_1_1bloom__filter_1abf3a0473b9cf4df2c4f000ca87f6649d" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>raw_table_size_</name></member>
      <member refid="classfc_1_1bloom__filter_1a4aa68713801e124ed96fdeb6acdc91da" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>salt_</name></member>
      <member refid="classfc_1_1bloom__filter_1a0ce6a19263b4df2b9b8ef1170603507b" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>salt_count_</name></member>
      <member refid="classfc_1_1bloom__filter_1a2ce933340ddf63a8c99599d26877d62b" prot="public" virt="virtual"><scope>fc::bloom_filter</scope><name>size</name></member>
      <member refid="classfc_1_1bloom__filter_1a9887b49deeaa1ccaad2aee40b86dddbd" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>table</name></member>
      <member refid="classfc_1_1bloom__filter_1a7288d926a8bfe6e783b65641e84b4c64" prot="public" virt="non-virtual"><scope>fc::bloom_filter</scope><name>table_size_</name></member>
      <member refid="classfc_1_1bloom__filter_1ad2dae7aae11aad2bc1d7399eaa4692fd" prot="public" virt="virtual"><scope>fc::bloom_filter</scope><name>~bloom_filter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
