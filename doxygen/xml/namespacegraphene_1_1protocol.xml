<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacegraphene_1_1protocol" kind="namespace" language="C++">
    <compoundname>graphene::protocol</compoundname>
    <innerclass refid="structgraphene_1_1protocol_1_1account__create__operation" prot="public">graphene::protocol::account_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1account__name__eq__lit__predicate" prot="public">graphene::protocol::account_name_eq_lit_predicate</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1account__options" prot="public">graphene::protocol::account_options</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1account__transfer__operation" prot="public">graphene::protocol::account_transfer_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1account__update__operation" prot="public">graphene::protocol::account_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1account__upgrade__operation" prot="public">graphene::protocol::account_upgrade_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1account__whitelist__operation" prot="public">graphene::protocol::account_whitelist_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1additional__asset__options" prot="public">graphene::protocol::additional_asset_options</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1address" prot="public">graphene::protocol::address</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1assert__operation" prot="public">graphene::protocol::assert_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset" prot="public">graphene::protocol::asset</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__claim__fees__operation" prot="public">graphene::protocol::asset_claim_fees_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__claim__pool__operation" prot="public">graphene::protocol::asset_claim_pool_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__create__operation" prot="public">graphene::protocol::asset_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__fund__fee__pool__operation" prot="public">graphene::protocol::asset_fund_fee_pool_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__global__settle__operation" prot="public">graphene::protocol::asset_global_settle_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__issue__operation" prot="public">graphene::protocol::asset_issue_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__options" prot="public">graphene::protocol::asset_options</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation" prot="public">graphene::protocol::asset_publish_feed_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__reserve__operation" prot="public">graphene::protocol::asset_reserve_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__settle__cancel__operation" prot="public">graphene::protocol::asset_settle_cancel_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__settle__operation" prot="public">graphene::protocol::asset_settle_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__symbol__eq__lit__predicate" prot="public">graphene::protocol::asset_symbol_eq_lit_predicate</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__update__bitasset__operation" prot="public">graphene::protocol::asset_update_bitasset_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation" prot="public">graphene::protocol::asset_update_feed_producers_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__update__issuer__operation" prot="public">graphene::protocol::asset_update_issuer_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1asset__update__operation" prot="public">graphene::protocol::asset_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1authority" prot="public">graphene::protocol::authority</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1balance__claim__operation" prot="public">graphene::protocol::balance_claim_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1base__operation" prot="public">graphene::protocol::base_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1bid__collateral__operation" prot="public">graphene::protocol::bid_collateral_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1bitasset__options" prot="public">graphene::protocol::bitasset_options</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1blind__input" prot="public">graphene::protocol::blind_input</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1blind__memo" prot="public">graphene::protocol::blind_memo</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1blind__output" prot="public">graphene::protocol::blind_output</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1blind__transfer__operation" prot="public">graphene::protocol::blind_transfer_operation</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1block__header" prot="public">graphene::protocol::block_header</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1block__id__predicate" prot="public">graphene::protocol::block_id_predicate</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1burn__worker__initializer" prot="public">graphene::protocol::burn_worker_initializer</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1buyback__account__options" prot="public">graphene::protocol::buyback_account_options</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1calc__fee__visitor" prot="public">graphene::protocol::calc_fee_visitor</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1call__order__update__operation" prot="public">graphene::protocol::call_order_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1cdd__vesting__policy__initializer" prot="public">graphene::protocol::cdd_vesting_policy_initializer</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1chain__parameters" prot="public">graphene::protocol::chain_parameters</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1committee__member__create__operation" prot="public">graphene::protocol::committee_member_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1committee__member__update__global__parameters__operation" prot="public">graphene::protocol::committee_member_update_global_parameters_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1committee__member__update__operation" prot="public">graphene::protocol::committee_member_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1custom__operation" prot="public">graphene::protocol::custom_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1execute__bid__operation" prot="public">graphene::protocol::execute_bid_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1extension" prot="public">graphene::protocol::extension</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1fba__distribute__operation" prot="public">graphene::protocol::fba_distribute_operation</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper" prot="public">graphene::protocol::fee_helper</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01account__create__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; account_create_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01asset__claim__pool__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; asset_claim_pool_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01asset__update__issuer__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; asset_update_issuer_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01bid__collateral__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; bid_collateral_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01htlc__create__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; htlc_create_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01htlc__extend__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; htlc_extend_operation &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1fee__helper_3_01htlc__redeem__operation_01_4" prot="public">graphene::protocol::fee_helper&lt; htlc_redeem_operation &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1fee__schedule" prot="public">graphene::protocol::fee_schedule</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1fee__schedule__validate__visitor" prot="public">graphene::protocol::fee_schedule_validate_visitor</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1fill__order__operation" prot="public">graphene::protocol::fill_order_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1graphene__extension__pack__count__visitor" prot="public">graphene::protocol::graphene_extension_pack_count_visitor</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1graphene__extension__pack__read__visitor" prot="public">graphene::protocol::graphene_extension_pack_read_visitor</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1graphene__extension__unpack__visitor" prot="public">graphene::protocol::graphene_extension_unpack_visitor</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1htlc__create__operation" prot="public">graphene::protocol::htlc_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1htlc__extend__operation" prot="public">graphene::protocol::htlc_extend_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1htlc__options" prot="public">graphene::protocol::htlc_options</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1htlc__redeem__operation" prot="public">graphene::protocol::htlc_redeem_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1htlc__redeemed__operation" prot="public">graphene::protocol::htlc_redeemed_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1htlc__refund__operation" prot="public">graphene::protocol::htlc_refund_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1instant__vesting__policy__initializer" prot="public">graphene::protocol::instant_vesting_policy_initializer</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1limit__order__cancel__operation" prot="public">graphene::protocol::limit_order_cancel_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1limit__order__create__operation" prot="public">graphene::protocol::limit_order_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1linear__vesting__policy__initializer" prot="public">graphene::protocol::linear_vesting_policy_initializer</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1memo__data" prot="public">graphene::protocol::memo_data</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1memo__message" prot="public">graphene::protocol::memo_message</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1no__special__authority" prot="public">graphene::protocol::no_special_authority</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1op__wrapper" prot="public">graphene::protocol::op_wrapper</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1operation__get__required__auth" prot="public">graphene::protocol::operation_get_required_auth</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1operation__validator" prot="public">graphene::protocol::operation_validator</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1override__transfer__operation" prot="public">graphene::protocol::override_transfer_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1p10" prot="public">graphene::protocol::p10</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1p10_3_010_01_4" prot="public">graphene::protocol::p10&lt; 0 &gt;</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1precomputable__transaction" prot="public">graphene::protocol::precomputable_transaction</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1predicate__validator" prot="public">graphene::protocol::predicate_validator</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1price" prot="public">graphene::protocol::price</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1price__feed" prot="public">graphene::protocol::price_feed</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1processed__transaction" prot="public">graphene::protocol::processed_transaction</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1proposal__create__operation" prot="public">graphene::protocol::proposal_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1proposal__delete__operation" prot="public">graphene::protocol::proposal_delete_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1proposal__update__operation" prot="public">graphene::protocol::proposal_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1pts__address" prot="public">graphene::protocol::pts_address</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1pubkey__comparator" prot="public">graphene::protocol::pubkey_comparator</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1public__key__type" prot="public">graphene::protocol::public_key_type</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1refund__worker__initializer" prot="public">graphene::protocol::refund_worker_initializer</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1set__fee__visitor" prot="public">graphene::protocol::set_fee_visitor</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1sign__state" prot="public">graphene::protocol::sign_state</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1signed__block" prot="public">graphene::protocol::signed_block</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1signed__block__header" prot="public">graphene::protocol::signed_block_header</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1signed__transaction" prot="public">graphene::protocol::signed_transaction</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1special__authority__validate__visitor" prot="public">graphene::protocol::special_authority_validate_visitor</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1stealth__confirmation" prot="public">graphene::protocol::stealth_confirmation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1top__holders__special__authority" prot="public">graphene::protocol::top_holders_special_authority</innerclass>
    <innerclass refid="classgraphene_1_1protocol_1_1transaction" prot="public">graphene::protocol::transaction</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1transfer__from__blind__operation" prot="public">graphene::protocol::transfer_from_blind_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1transfer__operation" prot="public">graphene::protocol::transfer_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation" prot="public">graphene::protocol::transfer_to_blind_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1transform__to__fee__parameters" prot="public">graphene::protocol::transform_to_fee_parameters</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1transform__to__fee__parameters_3_01fc_1_1static__variant_3_01_t_8_8_8_01_4_01_4" prot="public">graphene::protocol::transform_to_fee_parameters&lt; fc::static_variant&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1vesting__balance__create__operation" prot="public">graphene::protocol::vesting_balance_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1vesting__balance__withdraw__operation" prot="public">graphene::protocol::vesting_balance_withdraw_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1vesting__balance__worker__initializer" prot="public">graphene::protocol::vesting_balance_worker_initializer</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1void__result" prot="public">graphene::protocol::void_result</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1void__t" prot="public">graphene::protocol::void_t</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1vote__id__type" prot="public">graphene::protocol::vote_id_type</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1withdraw__permission__claim__operation" prot="public">graphene::protocol::withdraw_permission_claim_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1withdraw__permission__create__operation" prot="public">graphene::protocol::withdraw_permission_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1withdraw__permission__delete__operation" prot="public">graphene::protocol::withdraw_permission_delete_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1withdraw__permission__update__operation" prot="public">graphene::protocol::withdraw_permission_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1witness__create__operation" prot="public">graphene::protocol::witness_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1witness__update__operation" prot="public">graphene::protocol::witness_update_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1worker__create__operation" prot="public">graphene::protocol::worker_create_operation</innerclass>
    <innerclass refid="structgraphene_1_1protocol_1_1zero__fee__visitor" prot="public">graphene::protocol::zero_fee_visitor</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7" prot="public" static="no">
        <name>asset_issuer_permission_flags</name>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ac0be53c416c0f365980a14e5d6a83a60" prot="public">
          <name>charge_market_fee</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>an issuer-specified percentage of all market trades in this asset is paid to the issuer </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a925268cf7f7e511d2858eee66ef82cbf" prot="public">
          <name>white_list</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>accounts must be whitelisted in order to hold this asset </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a63b60eb3d6e25d669d8b93cb45ac6bc4" prot="public">
          <name>override_authority</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>issuer may transfer asset back to himself </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aaec73585631ebefcce567035b27c252c" prot="public">
          <name>transfer_restricted</name>
          <initializer>= 0x08</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>require the issuer to be one party to every transfer </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aedc04b6ab421f7f2363f3dc9d113b73d" prot="public">
          <name>disable_force_settle</name>
          <initializer>= 0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>disable force settling </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7afa951fce8754e6fb747e13854615eeb9" prot="public">
          <name>global_settle</name>
          <initializer>= 0x20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>allow the bitasset issuer to force a global settling <ndash/> this may be set in permissions, but not flags </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a5a96fe025ec33ffe4b103458846d08b3" prot="public">
          <name>disable_confidential</name>
          <initializer>= 0x40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>allow the asset to be used with confidential transactions </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a4ec6c6bd50bc48052bd7783d8b08d70a" prot="public">
          <name>witness_fed_asset</name>
          <initializer>= 0x80</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>allow the asset to be fed by witnesses </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ad19c5dd00f90497696a850af9c8bd26c" prot="public">
          <name>committee_fed_asset</name>
          <initializer>= 0x100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>allow the asset to be fed by the committee </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="147" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="147" bodyend="157"/>
      </memberdef>
      <memberdef kind="enum" id="namespacegraphene_1_1protocol_1a7fe50b12d88be67656c1550cbfd52d68" prot="public" static="no">
        <name>reserved_spaces</name>
        <enumvalue id="namespacegraphene_1_1protocol_1a7fe50b12d88be67656c1550cbfd52d68a0fb9ea39eb1dbd8203e9770991fb858e" prot="public">
          <name>relative_protocol_ids</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a7fe50b12d88be67656c1550cbfd52d68a5f0b9f66a4d54ff832b1c57585d66e66" prot="public">
          <name>protocol_ids</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegraphene_1_1protocol_1a7fe50b12d88be67656c1550cbfd52d68a1808e5bc955e9a7202c4a1a7ba5a04df" prot="public">
          <name>implementation_ids</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="175" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="175" bodyend="179"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a94748a50b37ab05b15fb496d1b9f7685" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1account__name__eq__lit__predicate" kindref="compound">account_name_eq_lit_predicate</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__symbol__eq__lit__predicate" kindref="compound">asset_symbol_eq_lit_predicate</ref>, <ref refid="structgraphene_1_1protocol_1_1block__id__predicate" kindref="compound">block_id_predicate</ref> &gt;</type>
        <definition>typedef static_variant&lt; account_name_eq_lit_predicate, asset_symbol_eq_lit_predicate, block_id_predicate &gt; graphene::protocol::predicate</definition>
        <argsstring></argsstring>
        <name>predicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When defining predicates do not make the protocol dependent upon implementation details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/assert.hpp" line="83" column="1" bodyfile="libraries/protocol/include/graphene/protocol/assert.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a5d54f0af0b886cba542137f450bb6388" prot="public" static="no">
        <type><ref refid="structgraphene_1_1protocol_1_1extension" kindref="compound">extension</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1additional__asset__options" kindref="compound">additional_asset_options</ref> &gt;</type>
        <definition>typedef extension&lt;additional_asset_options&gt; graphene::protocol::additional_asset_options_t</definition>
        <argsstring></argsstring>
        <name>additional_asset_options_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset_ops.hpp" line="36" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset_ops.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__operations_1gaff5b9634318c12aa876a1fc037db8954" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">fc::static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1void__result" kindref="compound">void_result</ref>, <ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref>, <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &gt;</type>
        <definition>typedef fc::static_variant&lt;void_result,object_id_type,asset&gt; graphene::protocol::operation_result</definition>
        <argsstring></argsstring>
        <name>operation_result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/base.hpp" line="87" column="1" bodyfile="libraries/protocol/include/graphene/protocol/base.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__operations_1gabfc2020c2b5e0ab3fd331fae4d936043" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1void__t" kindref="compound">void_t</ref> &gt;</type>
        <definition>typedef static_variant&lt;void_t&gt; graphene::protocol::future_extensions</definition>
        <argsstring></argsstring>
        <name>future_extensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For future expansion many structus include a single member of type extensions_type that can be changed when updating a protocol. You can always add new types to a static_variant without breaking backward compatibility. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/base.hpp" line="111" column="1" bodyfile="libraries/protocol/include/graphene/protocol/base.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__operations_1ga10cfb9bd22260c851c06b3b33ac0c512" prot="public" static="no">
        <type>flat_set&lt; <ref refid="group__operations_1gabfc2020c2b5e0ab3fd331fae4d936043" kindref="member">future_extensions</ref> &gt;</type>
        <definition>typedef flat_set&lt;future_extensions&gt; graphene::protocol::extensions_type</definition>
        <argsstring></argsstring>
        <name>extensions_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A flat_set is used to make sure that only one extension of each type is added and that they are added in order.</para><para><simplesect kind="note"><para>static_variant compares only the type tag and not the content. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/base.hpp" line="120" column="1" bodyfile="libraries/protocol/include/graphene/protocol/base.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1aeae4158c1eb06993eba92e3174ad6570" prot="public" static="no">
        <type><ref refid="structgraphene_1_1protocol_1_1transform__to__fee__parameters" kindref="compound">transform_to_fee_parameters</ref>&lt; <ref refid="group__operations_1gab6781848f77412553db6f687c895a5d1" kindref="member">operation</ref> &gt;::type</type>
        <definition>typedef transform_to_fee_parameters&lt;operation&gt;::type graphene::protocol::fee_parameters</definition>
        <argsstring></argsstring>
        <name>fee_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="35" column="1" bodyfile="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a7cc5e9ba2d8bef77a106b45c9920cc35" prot="public" static="no">
        <type><ref refid="structgraphene_1_1protocol_1_1fee__schedule" kindref="compound">fee_schedule</ref></type>
        <definition>typedef fee_schedule graphene::protocol::fee_schedule_type</definition>
        <argsstring></argsstring>
        <name>fee_schedule_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" line="208" column="1" bodyfile="libraries/protocol/include/graphene/protocol/fee_schedule.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a1bae001b47b8d864a79406219d67b832" prot="public" static="no">
        <type><ref refid="classfc_1_1ripemd160" kindref="compound">fc::ripemd160</ref></type>
        <definition>typedef fc::ripemd160 graphene::protocol::htlc_algo_ripemd160</definition>
        <argsstring></argsstring>
        <name>htlc_algo_ripemd160</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/htlc.hpp" line="32" column="1" bodyfile="libraries/protocol/include/graphene/protocol/htlc.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1ac7a995704f215556cbfd73295621d059" prot="public" static="no">
        <type><ref refid="classfc_1_1sha1" kindref="compound">fc::sha1</ref></type>
        <definition>typedef fc::sha1 graphene::protocol::htlc_algo_sha1</definition>
        <argsstring></argsstring>
        <name>htlc_algo_sha1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/htlc.hpp" line="33" column="1" bodyfile="libraries/protocol/include/graphene/protocol/htlc.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a5938be26ca395e77538fb8632c71d8a5" prot="public" static="no">
        <type><ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref></type>
        <definition>typedef fc::sha256 graphene::protocol::htlc_algo_sha256</definition>
        <argsstring></argsstring>
        <name>htlc_algo_sha256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/htlc.hpp" line="34" column="1" bodyfile="libraries/protocol/include/graphene/protocol/htlc.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1aefb49a2e093f5166d881a5e7cd47b648" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">fc::static_variant</ref>&lt; <ref refid="namespacegraphene_1_1protocol_1a1bae001b47b8d864a79406219d67b832" kindref="member">htlc_algo_ripemd160</ref>, <ref refid="namespacegraphene_1_1protocol_1ac7a995704f215556cbfd73295621d059" kindref="member">htlc_algo_sha1</ref>, <ref refid="namespacegraphene_1_1protocol_1a5938be26ca395e77538fb8632c71d8a5" kindref="member">htlc_algo_sha256</ref> &gt;</type>
        <definition>typedef fc::static_variant&lt; htlc_algo_ripemd160, htlc_algo_sha1, htlc_algo_sha256 &gt; graphene::protocol::htlc_hash</definition>
        <argsstring></argsstring>
        <name>htlc_hash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/htlc.hpp" line="40" column="1" bodyfile="libraries/protocol/include/graphene/protocol/htlc.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__operations_1gab6781848f77412553db6f687c895a5d1" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">fc::static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1transfer__operation" kindref="compound">transfer_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1limit__order__create__operation" kindref="compound">limit_order_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1limit__order__cancel__operation" kindref="compound">limit_order_cancel_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1call__order__update__operation" kindref="compound">call_order_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1fill__order__operation" kindref="compound">fill_order_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1account__create__operation" kindref="compound">account_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1account__update__operation" kindref="compound">account_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1account__whitelist__operation" kindref="compound">account_whitelist_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1account__upgrade__operation" kindref="compound">account_upgrade_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1account__transfer__operation" kindref="compound">account_transfer_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__create__operation" kindref="compound">asset_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__update__operation" kindref="compound">asset_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__update__bitasset__operation" kindref="compound">asset_update_bitasset_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__update__feed__producers__operation" kindref="compound">asset_update_feed_producers_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__issue__operation" kindref="compound">asset_issue_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__reserve__operation" kindref="compound">asset_reserve_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__fund__fee__pool__operation" kindref="compound">asset_fund_fee_pool_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__settle__operation" kindref="compound">asset_settle_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__global__settle__operation" kindref="compound">asset_global_settle_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__publish__feed__operation" kindref="compound">asset_publish_feed_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1witness__create__operation" kindref="compound">witness_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1witness__update__operation" kindref="compound">witness_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1proposal__create__operation" kindref="compound">proposal_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1proposal__update__operation" kindref="compound">proposal_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1proposal__delete__operation" kindref="compound">proposal_delete_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1withdraw__permission__create__operation" kindref="compound">withdraw_permission_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1withdraw__permission__update__operation" kindref="compound">withdraw_permission_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1withdraw__permission__claim__operation" kindref="compound">withdraw_permission_claim_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1withdraw__permission__delete__operation" kindref="compound">withdraw_permission_delete_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1committee__member__create__operation" kindref="compound">committee_member_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1committee__member__update__operation" kindref="compound">committee_member_update_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1committee__member__update__global__parameters__operation" kindref="compound">committee_member_update_global_parameters_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1vesting__balance__create__operation" kindref="compound">vesting_balance_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1vesting__balance__withdraw__operation" kindref="compound">vesting_balance_withdraw_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1worker__create__operation" kindref="compound">worker_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1custom__operation" kindref="compound">custom_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1assert__operation" kindref="compound">assert_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1balance__claim__operation" kindref="compound">balance_claim_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1override__transfer__operation" kindref="compound">override_transfer_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1transfer__to__blind__operation" kindref="compound">transfer_to_blind_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1blind__transfer__operation" kindref="compound">blind_transfer_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1transfer__from__blind__operation" kindref="compound">transfer_from_blind_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__settle__cancel__operation" kindref="compound">asset_settle_cancel_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__claim__fees__operation" kindref="compound">asset_claim_fees_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1fba__distribute__operation" kindref="compound">fba_distribute_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1bid__collateral__operation" kindref="compound">bid_collateral_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1execute__bid__operation" kindref="compound">execute_bid_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__claim__pool__operation" kindref="compound">asset_claim_pool_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1asset__update__issuer__operation" kindref="compound">asset_update_issuer_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1htlc__create__operation" kindref="compound">htlc_create_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1htlc__redeem__operation" kindref="compound">htlc_redeem_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1htlc__redeemed__operation" kindref="compound">htlc_redeemed_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1htlc__extend__operation" kindref="compound">htlc_extend_operation</ref>, <ref refid="structgraphene_1_1protocol_1_1htlc__refund__operation" kindref="compound">htlc_refund_operation</ref> &gt;</type>
        <definition>typedef fc::static_variant&lt; transfer_operation, limit_order_create_operation, limit_order_cancel_operation, call_order_update_operation, fill_order_operation, account_create_operation, account_update_operation, account_whitelist_operation, account_upgrade_operation, account_transfer_operation, asset_create_operation, asset_update_operation, asset_update_bitasset_operation, asset_update_feed_producers_operation, asset_issue_operation, asset_reserve_operation, asset_fund_fee_pool_operation, asset_settle_operation, asset_global_settle_operation, asset_publish_feed_operation, witness_create_operation, witness_update_operation, proposal_create_operation, proposal_update_operation, proposal_delete_operation, withdraw_permission_create_operation, withdraw_permission_update_operation, withdraw_permission_claim_operation, withdraw_permission_delete_operation, committee_member_create_operation, committee_member_update_operation, committee_member_update_global_parameters_operation, vesting_balance_create_operation, vesting_balance_withdraw_operation, worker_create_operation, custom_operation, assert_operation, balance_claim_operation, override_transfer_operation, transfer_to_blind_operation, blind_transfer_operation, transfer_from_blind_operation, asset_settle_cancel_operation, asset_claim_fees_operation, fba_distribute_operation, bid_collateral_operation, execute_bid_operation, asset_claim_pool_operation, asset_update_issuer_operation, htlc_create_operation, htlc_redeem_operation, htlc_redeemed_operation, htlc_extend_operation, htlc_refund_operation &gt; graphene::protocol::operation</definition>
        <argsstring></argsstring>
        <name>operation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the set of valid operations as a discriminated union type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/operations.hpp" line="105" column="1" bodyfile="libraries/protocol/include/graphene/protocol/operations.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a0e74afece7dbfa1a51f7b183624850d4" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1no__special__authority" kindref="compound">no_special_authority</ref>, <ref refid="structgraphene_1_1protocol_1_1top__holders__special__authority" kindref="compound">top_holders_special_authority</ref> &gt;</type>
        <definition>typedef static_variant&lt; no_special_authority, top_holders_special_authority &gt; graphene::protocol::special_authority</definition>
        <argsstring></argsstring>
        <name>special_authority</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/special_authority.hpp" line="41" column="1" bodyfile="libraries/protocol/include/graphene/protocol/special_authority.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a73d07cdf7c96887580ecfab2909ae548" prot="public" static="no">
        <type><ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">fc::ecc::private_key</ref></type>
        <definition>using graphene::protocol::private_key_type = typedef fc::ecc::private_key</definition>
        <argsstring></argsstring>
        <name>private_key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="143" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a56354f39ed89f6a0a13fe90ba8228809" prot="public" static="no">
        <type><ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref></type>
        <definition>using graphene::protocol::chain_id_type = typedef fc::sha256</definition>
        <argsstring></argsstring>
        <name>chain_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="144" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a54851df9ea21bef79e7cdb2da2e3e3cc" prot="public" static="no">
        <type>boost::rational&lt; int32_t &gt;</type>
        <definition>using graphene::protocol::ratio_type = typedef boost::rational&lt;int32_t&gt;</definition>
        <argsstring></argsstring>
        <name>ratio_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="145" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a32e784a8edceba5506db2c130ed9cb9c" prot="public" static="no">
        <type><ref refid="classfc_1_1ripemd160" kindref="compound">fc::ripemd160</ref></type>
        <definition>using graphene::protocol::block_id_type = typedef fc::ripemd160</definition>
        <argsstring></argsstring>
        <name>block_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="183" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a3268cd3ebeb529ab0c0681d9564dab4a" prot="public" static="no">
        <type><ref refid="classfc_1_1ripemd160" kindref="compound">fc::ripemd160</ref></type>
        <definition>using graphene::protocol::checksum_type = typedef fc::ripemd160</definition>
        <argsstring></argsstring>
        <name>checksum_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="184" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a040f9f71bff896e89dc9ee3ff92bb076" prot="public" static="no">
        <type><ref refid="classfc_1_1ripemd160" kindref="compound">fc::ripemd160</ref></type>
        <definition>using graphene::protocol::transaction_id_type = typedef fc::ripemd160</definition>
        <argsstring></argsstring>
        <name>transaction_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="185" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a4ba2f090fee47759ed812b7849c6fee8" prot="public" static="no">
        <type><ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref></type>
        <definition>using graphene::protocol::digest_type = typedef fc::sha256</definition>
        <argsstring></argsstring>
        <name>digest_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="186" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1ade0535fb9b29fcc7de372c0f1ff5d218" prot="public" static="no">
        <type><ref refid="namespacefc_1_1ecc_1a38a548547320ad8e9bf07b7dbc875e9d" kindref="member">fc::ecc::compact_signature</ref></type>
        <definition>using graphene::protocol::signature_type = typedef fc::ecc::compact_signature</definition>
        <argsstring></argsstring>
        <name>signature_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="187" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a69b2104c1c11eed2d17bd29b86713347" prot="public" static="no">
        <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref>&lt; int64_t &gt;</type>
        <definition>using graphene::protocol::share_type = typedef safe&lt;int64_t&gt;</definition>
        <argsstring></argsstring>
        <name>share_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="188" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1a0b8cef782b0ba0eb807da61f2cc811bf" prot="public" static="no">
        <type>uint16_t</type>
        <definition>using graphene::protocol::weight_type = typedef uint16_t</definition>
        <argsstring></argsstring>
        <name>weight_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="189" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraphene_1_1protocol_1aae2f87c394dcd3096561bb3ca5962148" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">fc::static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1linear__vesting__policy__initializer" kindref="compound">linear_vesting_policy_initializer</ref>, <ref refid="structgraphene_1_1protocol_1_1cdd__vesting__policy__initializer" kindref="compound">cdd_vesting_policy_initializer</ref>, <ref refid="structgraphene_1_1protocol_1_1instant__vesting__policy__initializer" kindref="compound">instant_vesting_policy_initializer</ref> &gt;</type>
        <definition>typedef fc::static_variant&lt; linear_vesting_policy_initializer, cdd_vesting_policy_initializer, instant_vesting_policy_initializer &gt; graphene::protocol::vesting_policy_initializer</definition>
        <argsstring></argsstring>
        <name>vesting_policy_initializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/vesting.hpp" line="54" column="1" bodyfile="libraries/protocol/include/graphene/protocol/vesting.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__workers_1gacad8e9996ced0a2fc8e66f65210701d9" prot="public" static="no">
        <type><ref refid="classfc_1_1static__variant" kindref="compound">static_variant</ref>&lt; <ref refid="structgraphene_1_1protocol_1_1refund__worker__initializer" kindref="compound">refund_worker_initializer</ref>, <ref refid="structgraphene_1_1protocol_1_1vesting__balance__worker__initializer" kindref="compound">vesting_balance_worker_initializer</ref>, <ref refid="structgraphene_1_1protocol_1_1burn__worker__initializer" kindref="compound">burn_worker_initializer</ref> &gt;</type>
        <definition>typedef static_variant&lt; refund_worker_initializer, vesting_balance_worker_initializer, burn_worker_initializer &gt; graphene::protocol::worker_initializer</definition>
        <argsstring></argsstring>
        <name>worker_initializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/worker.hpp" line="71" column="1" bodyfile="libraries/protocol/include/graphene/protocol/worker.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a29bad2908cce032908c211a8c600a011" prot="public" static="no" mutable="no">
        <type>const int64_t</type>
        <definition>const int64_t graphene::protocol::scaled_precision_lut</definition>
        <argsstring>[19]</argsstring>
        <name>scaled_precision_lut</name>
        <initializer>=
{
   <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt;  0 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt;  1 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt;  2 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt;  3 &gt;::v,
   <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt;  4 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt;  5 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt;  6 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt;  7 &gt;::v,
   <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt;  8 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt;  9 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt; 10 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt; 11 &gt;::v,
   <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt; 12 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt; 13 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt; 14 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt; 15 &gt;::v,
   <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt; 16 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt; 17 &gt;::v, <ref refid="structgraphene_1_1protocol_1_1p10" kindref="compound">p10</ref>&lt; 18 &gt;::v
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset.cpp" line="311" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a69ffd663f992d14b5c71cbc51017d8d6" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t graphene::protocol::ASSET_ISSUER_PERMISSION_MASK</definition>
        <argsstring></argsstring>
        <name>ASSET_ISSUER_PERMISSION_MASK</name>
        <initializer>=
        <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ac0be53c416c0f365980a14e5d6a83a60" kindref="member">charge_market_fee</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a925268cf7f7e511d2858eee66ef82cbf" kindref="member">white_list</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a63b60eb3d6e25d669d8b93cb45ac6bc4" kindref="member">override_authority</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aaec73585631ebefcce567035b27c252c" kindref="member">transfer_restricted</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aedc04b6ab421f7f2363f3dc9d113b73d" kindref="member">disable_force_settle</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7afa951fce8754e6fb747e13854615eeb9" kindref="member">global_settle</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a5a96fe025ec33ffe4b103458846d08b3" kindref="member">disable_confidential</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a4ec6c6bd50bc48052bd7783d8b08d70a" kindref="member">witness_fed_asset</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ad19c5dd00f90497696a850af9c8bd26c" kindref="member">committee_fed_asset</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="158" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a52c0d1088037354bbdf199a35322e467" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t graphene::protocol::UIA_ASSET_ISSUER_PERMISSION_MASK</definition>
        <argsstring></argsstring>
        <name>UIA_ASSET_ISSUER_PERMISSION_MASK</name>
        <initializer>=
        <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7ac0be53c416c0f365980a14e5d6a83a60" kindref="member">charge_market_fee</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a925268cf7f7e511d2858eee66ef82cbf" kindref="member">white_list</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a63b60eb3d6e25d669d8b93cb45ac6bc4" kindref="member">override_authority</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7aaec73585631ebefcce567035b27c252c" kindref="member">transfer_restricted</ref>
        | <ref refid="namespacegraphene_1_1protocol_1a31f22f43ceabd14325d69281eda006d7a5a96fe025ec33ffe4b103458846d08b3" kindref="member">disable_confidential</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="168" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a59cd8474d34d9ea95bc8630340de313e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>missing required active authority missing required other authority graphene::protocol::transaction_exception</definition>
        <argsstring></argsstring>
        <name>transaction_exception</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/small_ops.cpp" line="40" column="1" bodyfile="libraries/protocol/small_ops.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacegraphene_1_1protocol_1a03369f3ca9f5b7877e32928d1bace3c5" prot="public" static="no" mutable="no">
        <type>const flat_set&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt;</type>
        <definition>const flat_set&lt;public_key_type&gt; graphene::protocol::empty_keyset</definition>
        <argsstring></argsstring>
        <name>empty_keyset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/transaction.cpp" line="113" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a17038847d568dbca2c8b23801675e749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::is_valid_name</definition>
        <argsstring>(const string &amp;name)</argsstring>
        <name>is_valid_name</name>
        <param>
          <type>const string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Names must comply with the following grammar (RFC 1035): &lt;domain&gt; ::= &lt;subdomain&gt; | &quot; &quot; &lt;subdomain&gt; ::= &lt;label&gt; | &lt;subdomain&gt; &quot;.&quot; &lt;label&gt; &lt;label&gt; ::= &lt;letter&gt; [ [ &lt;ldh-str&gt; ] &lt;let-dig&gt; ] &lt;ldh-str&gt; ::= &lt;let-dig-hyp&gt; | &lt;let-dig-hyp&gt; &lt;ldh-str&gt; &lt;let-dig-hyp&gt; ::= &lt;let-dig&gt; | &quot;-&quot; &lt;let-dig&gt; ::= &lt;letter&gt; | &lt;digit&gt;</para><para>Which is equivalent to the following:</para><para>&lt;domain&gt; ::= &lt;subdomain&gt; | &quot; &quot; &lt;subdomain&gt; ::= &lt;label&gt; (&quot;.&quot; &lt;label&gt;)* &lt;label&gt; ::= &lt;letter&gt; [ [ &lt;let-dig-hyp&gt;+ ] &lt;let-dig&gt; ] &lt;let-dig-hyp&gt; ::= &lt;let-dig&gt; | &quot;-&quot; &lt;let-dig&gt; ::= &lt;letter&gt; | &lt;digit&gt;</para><para>I.e. a valid name consists of a dot-separated sequence of one or more labels consisting of the following rules:</para><para><itemizedlist>
<listitem><para>Each label is three characters or more</para></listitem><listitem><para>Each label begins with a letter</para></listitem><listitem><para>Each label ends with a letter or digit</para></listitem><listitem><para>Each label contains only letters, digits or hyphens</para></listitem></itemizedlist>
</para><para>In addition we require the following:</para><para><itemizedlist>
<listitem><para>All letters are lowercase</para></listitem><listitem><para>Length is between (inclusive) GRAPHENE_MIN_ACCOUNT_NAME_LENGTH and GRAPHENE_MAX_ACCOUNT_NAME_LENGTH </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/account.cpp" line="60" column="1" bodyfile="libraries/protocol/account.cpp" bodystart="60" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1aa14f880973444987a8fa480cfc9f3f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::is_cheap_name</definition>
        <argsstring>(const string &amp;n)</argsstring>
        <name>is_cheap_name</name>
        <param>
          <type>const string &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/account.cpp" line="129" column="1" bodyfile="libraries/protocol/account.cpp" bodystart="129" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a2babeb53917c92361abcf1e41a410506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset.cpp" line="35" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="35" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a6887697dfd803d25a5ede42ee5582e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator&lt;</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset.cpp" line="46" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="46" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ad729df32a31402a8a97954c081809816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::operator*</definition>
        <argsstring>(const asset &amp;a, const price &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Multiply and round down. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset.cpp" line="59" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="59" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ab0740fdafe73c553696363b97480785d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::operator/</definition>
        <argsstring>(const asset &amp;base, const asset &amp;quote)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>quote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset.cpp" line="98" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a0b645b95359baf95da9978f570eedc5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::operator*</definition>
        <argsstring>(const price &amp;p, const ratio_type &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a54851df9ea21bef79e7cdb2da2e3e3cc" kindref="member">ratio_type</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset.cpp" line="107" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="107" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ad637106d775104ae7753d3cda321076f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::operator/</definition>
        <argsstring>(const price &amp;p, const ratio_type &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a54851df9ea21bef79e7cdb2da2e3e3cc" kindref="member">ratio_type</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset.cpp" line="189" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a30b50b9c985f8029039fd640b476e582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::is_valid_symbol</definition>
        <argsstring>(const string &amp;symbol)</argsstring>
        <name>is_valid_symbol</name>
        <param>
          <type>const string &amp;</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Valid symbols can contain [A-Z0-9], and &apos;.&apos; They must start with [A, Z] They must end with [A, Z] before HF_620 or [A-Z0-9] after it They can contain a maximum of one &apos;.&apos; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/asset_ops.cpp" line="38" column="1" bodyfile="libraries/protocol/asset_ops.cpp" bodystart="38" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a0e80310f8374ca441b6b1dfd28e9401d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::add_authority_accounts</definition>
        <argsstring>(flat_set&lt; account_id_type &gt; &amp;result, const authority &amp;a)</argsstring>
        <name>add_authority_accounts</name>
        <param>
          <type>flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add all account members of the given authority to the given flat_set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/authority.cpp" line="31" column="1" bodyfile="libraries/protocol/authority.cpp" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a5129f8fcdb820acd03067f782b1e7f6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const address &amp;a, const address &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="60" column="1" bodyfile="libraries/protocol/include/graphene/protocol/address.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ae0ea32cd151c5f57a2b47f4527e9e5d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator!=</definition>
        <argsstring>(const address &amp;a, const address &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="61" column="1" bodyfile="libraries/protocol/include/graphene/protocol/address.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ac278db20c5fbf361341c28c1c9a02e74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator&lt;</definition>
        <argsstring>(const address &amp;a, const address &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/address.hpp" line="62" column="1" bodyfile="libraries/protocol/include/graphene/protocol/address.hpp" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a3531b7a2b006abb3be3f000870ca2c9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::operator~</definition>
        <argsstring>(const price &amp;p)</argsstring>
        <name>operator~</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="140" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a55d88d3f291827b0aa3c83d32e767149" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator&gt;</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="145" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a29193b1353e306637073b84f8b0c56a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator&lt;=</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="146" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ac1905ef4e43009f8d733b3b189ada00f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator&gt;=</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="147" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ad8dba204b979060841eaf0dc094c4bb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator!=</definition>
        <argsstring>(const price &amp;a, const price &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="148" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a985fca1eeec6fe264a4538e960dcec92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
        <definition>price&amp; graphene::protocol::operator*=</definition>
        <argsstring>(price &amp;p, const ratio_type &amp;r)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a54851df9ea21bef79e7cdb2da2e3e3cc" kindref="member">ratio_type</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="155" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="155" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a7e00cb0dd96f904bcc25b0bdc38cf216" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
        <definition>price&amp; graphene::protocol::operator/=</definition>
        <argsstring>(price &amp;p, const ratio_type &amp;r)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a54851df9ea21bef79e7cdb2da2e3e3cc" kindref="member">ratio_type</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="157" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="157" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a5125d9ba82fbb77cea4b6f2de22c7f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::operation_get_required_authorities</definition>
        <argsstring>(const operation &amp;op, flat_set&lt; account_id_type &gt; &amp;active, flat_set&lt; account_id_type &gt; &amp;owner, vector&lt; authority &gt; &amp;other)</argsstring>
        <name>operation_get_required_authorities</name>
        <param>
          <type>const <ref refid="group__operations_1gab6781848f77412553db6f687c895a5d1" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>active</declname>
        </param>
        <param>
          <type>flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends required authorites to the result vector. The authorities appended are not the same as those returned by get_required_auth</para><para><simplesect kind="return"><para>a set of required authorities for op </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/operations.hpp" line="115" column="1" bodyfile="libraries/protocol/operations.cpp" bodystart="90" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1ab4eaf3cdd7c2b540bd2180fbec4c4c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::operation_validate</definition>
        <argsstring>(const operation &amp;op)</argsstring>
        <name>operation_validate</name>
        <param>
          <type>const <ref refid="group__operations_1gab6781848f77412553db6f687c895a5d1" kindref="member">operation</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/operations.hpp" line="120" column="1" bodyfile="libraries/protocol/operations.cpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1aed5ab34bcf5755f500482c60ce25eab0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const pts_address &amp;a, const pts_address &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/pts_address.hpp" line="55" column="1" bodyfile="libraries/protocol/include/graphene/protocol/pts_address.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a3fa654568af6da7ab41a00f15f6749c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator!=</definition>
        <argsstring>(const pts_address &amp;a, const pts_address &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/pts_address.hpp" line="56" column="1" bodyfile="libraries/protocol/include/graphene/protocol/pts_address.hpp" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a2e0a729c91726df732c789cc76207883" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator&lt;</definition>
        <argsstring>(const pts_address &amp;a, const pts_address &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">pts_address</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/pts_address.hpp" line="57" column="1" bodyfile="libraries/protocol/include/graphene/protocol/pts_address.hpp" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a39ae3b76548010be593199b1f101fe1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::validate_special_authority</definition>
        <argsstring>(const special_authority &amp;auth)</argsstring>
        <name>validate_special_authority</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1protocol_1a0e74afece7dbfa1a51f7b183624850d4" kindref="member">special_authority</ref> &amp;</type>
          <declname>auth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/special_authority.hpp" line="43" column="1" bodyfile="libraries/protocol/special_authority.cpp" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="group__transactions_1gabaff9197c4a002a9a6cfcbdb9866ed9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::verify_authority</definition>
        <argsstring>(const vector&lt; operation &gt; &amp;ops, const flat_set&lt; public_key_type &gt; &amp;sigs, const std::function&lt; const authority *(account_id_type)&gt; &amp;get_active, const std::function&lt; const authority *(account_id_type)&gt; &amp;get_owner, bool allow_non_immediate_owner, uint32_t max_recursion=GRAPHENE_MAX_SIG_CHECK_DEPTH, bool allow_committe=false, const flat_set&lt; account_id_type &gt; &amp;active_aprovals=flat_set&lt; account_id_type &gt;(), const flat_set&lt; account_id_type &gt; &amp;owner_approvals=flat_set&lt; account_id_type &gt;())</argsstring>
        <name>verify_authority</name>
        <param>
          <type>const vector&lt; <ref refid="group__operations_1gab6781848f77412553db6f687c895a5d1" kindref="member">operation</ref> &gt; &amp;</type>
          <declname>ops</declname>
        </param>
        <param>
          <type>const flat_set&lt; <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &gt; &amp;</type>
          <declname>sigs</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
          <declname>get_active</declname>
        </param>
        <param>
          <type>const std::function&lt; const <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> *(account_id_type)&gt; &amp;</type>
          <declname>get_owner</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_non_immediate_owner</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_recursion</declname>
          <defval><ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1aea0bc2216bc54371f7f54d6f6d6e4d9d" kindref="member">GRAPHENE_MAX_SIG_CHECK_DEPTH</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_committe</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>active_aprovals</declname>
          <defval>flat_set&lt; account_id_type &gt;()</defval>
        </param>
        <param>
          <type>const flat_set&lt; account_id_type &gt; &amp;</type>
          <declname>owner_approvals</declname>
          <defval>flat_set&lt; account_id_type &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether given public keys and approvals are sufficient to authorize given operations. Throws an exception when failed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigs</parametername>
</parameternamelist>
<parameterdescription>
<para>a set of public keys </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_active</parametername>
</parameternamelist>
<parameterdescription>
<para>callback function to retrieve active authorities of a given account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_owner</parametername>
</parameternamelist>
<parameterdescription>
<para>callback function to retrieve owner authorities of a given account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_non_immediate_owner</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to allow owner authority of non-immediately required accounts to authorize operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_recursion</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum level of recursion when verifying, since an account can have another account in active authorities and/or owner authorities </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_committee</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to allow the special &quot;committee account&quot; to authorize the operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_approvals</parametername>
</parameternamelist>
<parameterdescription>
<para>accounts that approved the operations with their active authories </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>owner_approvals</parametername>
</parameternamelist>
<parameterdescription>
<para>accounts that approved the operations with their owner authories </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/transaction.hpp" line="252" column="1" bodyfile="libraries/protocol/transaction.cpp" bodystart="267" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a7fa29913989b73d976f47c02d07db6c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::is_relative</definition>
        <argsstring>(object_id_type o)</argsstring>
        <name>is_relative</name>
        <param>
          <type><ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">object_id_type</ref></type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="181" column="1" bodyfile="libraries/protocol/include/graphene/protocol/types.hpp" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a16c54c83a62fa622b6593b5cf7f142b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::FC_IMPLEMENT_DERIVED_EXCEPTION</definition>
        <argsstring>(transaction_exception, protocol_exception, 4010000, &quot;transaction validation exception&quot;) FC_IMPLEMENT_DERIVED_EXCEPTION(tx_missing_active_auth</argsstring>
        <name>FC_IMPLEMENT_DERIVED_EXCEPTION</name>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a59cd8474d34d9ea95bc8630340de313e" kindref="member">transaction_exception</ref></type>
        </param>
        <param>
          <type>protocol_exception</type>
        </param>
        <param>
          <type>4010000</type>
        </param>
        <param>
          <type>&quot;transaction validation exception&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/small_ops.cpp" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1abdc2ab76e48765b55154bdfc16e751cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>missing required active <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref></type>
        <definition>missing required active authority graphene::protocol::FC_IMPLEMENT_DERIVED_EXCEPTION</definition>
        <argsstring>(tx_missing_owner_auth, transaction_exception, 4010002, &quot;missing required owner authority&quot;) FC_IMPLEMENT_DERIVED_EXCEPTION(tx_missing_other_auth</argsstring>
        <name>FC_IMPLEMENT_DERIVED_EXCEPTION</name>
        <param>
          <type>tx_missing_owner_auth</type>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a59cd8474d34d9ea95bc8630340de313e" kindref="member">transaction_exception</ref></type>
        </param>
        <param>
          <type>4010002</type>
        </param>
        <param>
          <type>&quot;missing required owner <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/small_ops.cpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1afd0a3ddad2e5fdb5a18525676dabee93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>missing required active <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref> missing required other <ref refid="structgraphene_1_1protocol_1_1authority" kindref="compound">authority</ref></type>
        <definition>missing required active authority missing required other authority graphene::protocol::FC_IMPLEMENT_DERIVED_EXCEPTION</definition>
        <argsstring>(tx_irrelevant_sig, transaction_exception, 4010004, &quot;irrelevant signature included&quot;) FC_IMPLEMENT_DERIVED_EXCEPTION(tx_duplicate_sig</argsstring>
        <name>FC_IMPLEMENT_DERIVED_EXCEPTION</name>
        <param>
          <type>tx_irrelevant_sig</type>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1protocol_1a59cd8474d34d9ea95bc8630340de313e" kindref="member">transaction_exception</ref></type>
        </param>
        <param>
          <type>4010004</type>
        </param>
        <param>
          <type>&quot;irrelevant signature included&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/small_ops.cpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1af8dccb085c6e9752f218974f2660207d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const public_key_type &amp;p1, const fc::ecc::public_key &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">fc::ecc::public_key</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/types.cpp" line="76" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1a2ba82e45361a4ea39926919b8f5ac013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator==</definition>
        <argsstring>(const public_key_type &amp;p1, const public_key_type &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/types.cpp" line="81" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraphene_1_1protocol_1aac81ba4c9ea6ae042873ec67c152a4a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::operator!=</definition>
        <argsstring>(const public_key_type &amp;p1, const public_key_type &amp;p2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">public_key_type</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/types.cpp" line="86" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="86" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/chain/include/graphene/chain/transaction_evaluation_state.hpp" line="28" column="1"/>
  </compounddef>
</doxygen>
